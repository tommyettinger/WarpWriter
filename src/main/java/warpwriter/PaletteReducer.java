package warpwriter;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ByteArray;
import com.badlogic.gdx.utils.IntIntMap;
import com.badlogic.gdx.utils.TimeUtils;
import squidpony.squidmath.IRNG;
import squidpony.squidmath.NumberTools;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

/**
 * Data that can be used to limit the colors present in a Pixmap or other image, here with the goal of using 256 or less
 * colors in the image (for saving indexed-mode images).
 * <p>
 * Created by Tommy Ettinger on 6/23/2018.
 */
public class PaletteReducer {
    public byte[] paletteMapping;
    public final int[] paletteArray = new int[256];
    ByteArray curErrorRedBytes, nextErrorRedBytes, curErrorGreenBytes, nextErrorGreenBytes, curErrorBlueBytes, nextErrorBlueBytes;
    float ditherStrength = 0.5f, halfDitherStrength = 0.25f;

    /**
     * Constructs a default PaletteReducer that uses the DawnBringer Aurora palette.
     */
    public PaletteReducer() {
        this(Coloring.AURORA, "\u0001\u0001\u0001\u0001\u0002uu\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017\u0017\u0017\u0017ÞÞÞÞÞÞÞ\u0015\u0015\u0015\u0015\u0015\u0001\u0001\u0001\u0002\u0002uuu\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017\u0017\u0017ÞÞÞÞÞÞÞÝ\u0015\u0015\u0015\u0015\u0001\u0001\u0002\u0002uuuu\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017\u0017ßÞÞÞÞÞÞÝÝÝ\u0015\u0015\u0015\u0002\u0002\u0002\u0002uuuuàà\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017ßßÞÞÞÞÞÝÝÝÝÝ\u0015\u0015WWWWuuuàààààÊÊËËËËßßÞÞÞÞÞÝÝÝÝÝÝ\u0015WWWWuuuààààÊÊËËËËËËËÞÞÞÞÝÝÝÝÝÝÝÝWWWg½½½½àÊÊÊÊËËËËËËÌÌÌÌÞÝÝÝÝÝÝÎÎ³³³½½½½½½ÊÊÊËËËËËËÌÌÌÌÌÌÝÝÝÝÎÎÎÎ³³³³½½½½½hÉÉÉËËËËÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ´´´´½½½½½ÉÉÉÉÉËËÌÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ´´´´´XXXÉÉÉÉÉÉÉÉÌÌÌÌÌÌÌÏÏÏÎÎÎÎÎÎ´´´´´´fffÉÉÉÉÉÉÉÌÌÌÌÌÌÏÏÏÏÎÎÎÎÎÎ´´´´´´ffffÉÉÉÉÉ\u0010\u0010ÌÌÌÌÏÏÏÏÏÏÎÎÎÎÎ+´´´´ffffffÉÉÉ\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÏÏÐÎ×××++++´fffffffÉ\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÏÐÐ××××+++++fffffff\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÐÐÐ××××++++++¼¼¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÈÈÈ××××+++µµµ¼¼¼¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÈÈÈÈÈÈ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈ××µµµµµµ¼¼»»»»¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµº»»»»»»»¾¾¾¾¾¾¾¿¿ÈÈÈÈÈÈÈÈÈÖµººººº»»»»»»»»¾¾¾¿¿¿¿¿¿ÈÈÈÈÈÈÖÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿ÈÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿¿ÇÇÇÖÖÖÖÖººººººº»»»»»»ÀÀ¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶ººººº»»»ÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶ººººÀÀÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶¶ºÀÀÀÀÀÀÀÀÀ¿¿¿¿ÇÇÇÇÇÇÇÇÇÇÖ········ÀÀÀÀÀÀÀÀÀÀ¿ÁÁÁÇÇÇÇÇÇÇÇ\u0012\u0012-·······ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÇÇÇÇÇÇÇ\u0012\u0012\u0012-----···ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇÇ\u0012\u0012\u0012\u0012--------ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇ\u0012\u0012\u0012\u0012\u0012\u0001\u0001\u0001\u0001\u0002uu\u0018\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017\u0017\u0017ÞÞÞÞÞÞÞÝ\u0015\u0015\u0015\u0015\u0001\u0001\u0002\u0002\u0002uuu\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017\u0017ßÞÞÞÞÞÞÝÝ\u0015\u0015\u0015\u0015\u0001\u0002\u0002\u0002uuuu\u0018\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017ßßÞÞÞÞÞÞÝÝÝ\u0015\u0015\u0015W\u0002\u0002\u0002uuuuàà\u0018\u0018\u0018\u0018\u0017\u0017\u0017ßßßÞÞÞÞÞÝÝÝÝÝ\u0015\u0015WWWWuuuàààààÊÊËËËËßßÞÞÞÞÝÝÝÝÝÝÝÝWWWWgu½àààÊÊÊËËËËËËËÞÞÞÞÝÝÝÝÝÝÝÝ²WWgg½½½½ÊÊÊÊËËËËËËÌÌÌÌÝÝÝÝÝÝÝÝÎ³³³g½½½½½ÊÊÊÊËËËËËÌÌÌÌÌÌÝÝÝÝÎÎÎÎ³³³³½½½½½hhÉÉËËËËÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ³³´´½½½½hhÉÉÉÉËËËÌÌÌÌÌÌÌÏÎÎÎÎÎÎÎ´´´´´XXXXÉÉÉÉÉÉËÌÌÌÌÌÌÌÏÏÏÎÎÎÎÎÎ´´´´´XXffÉÉÉÉÉÉÉÌÌÌÌÌÌÏÏÏÏÏÎÎÎÎÎ´´´´´´ffffÉÉÉÉÉÉ\u0010ÌÌÌÏÏÏÏÏÏÏÎÎÎÎÎ´´´´´ffffffÉÉÉ\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÏÏÐÐÐ×××++++´fffffffÉ\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÏÐÐÐ×××+++++ffffff¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÐÐÐÐ×××+++++¼¼¼¼¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÐÐÐ××××µµµµµµ¼¼¼¼¼¼¼\u0010\u0010\u0010¾¾¾¾¾ÏÏÈÈÈÈÈÈ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¿ÈÈÈÈÈÈÈÈÈÖµµºººº»»»»»»»»¾¾¾¿¿¿¿¿¿ÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿ÈÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿¿ÇÇÇÖÖÖÖÖººººººº»»»»»»ÀÀ¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶¶ºººº»»»»ÀÀÀÀ¿¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶¶ºººÀÀÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶¶ºÀÀÀÀÀÀÀÀÀ¿¿¿ÁÁÇÇÇÇÇÇÇÇÇÖ········ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÇÇÇÇÇÇÇÇ\u0012\u0012········ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇÇÇ\u0012\u0012\u0012---·····ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇ\u0012\u0012\u0012\u0012------··ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇ\u0012\u0012\u0012\u0012\u0012\u0001\u0001\u0001\u0002\u0094\u0094u\u0018\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017\u0017ßßßÞÞÞÞÞÝÝ\u0015\u0015\u0015\u0015\u0001\u0001\u0002\u0002\u0002uuu\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017ßßßßÞÞÞÞÞÝÝÝ\u0015\u0015\u0015\u0002\u0002\u0002\u0002\u0002uuu\u0018\u0018\u0018\u0018\u0018\u0018\u0017\u0017ßßßßßÞÞÞÞÝÝÝÝÝ\u0015\u0015WW\u0002\u0002uuuuàà\u0018\u0018\u0018\u0018\u0017ßßßßßßÞÞÞÞÝÝÝÝÝÝ\u0015WWWWuuuvàààÊÊÊËËËßßßßÞÞÞÝÝÝÝÝÝÝÝWWWggg½vàÊÊÊÊËËËËËËßßÞÞÞÝÝÝÝÝÝÝÝ²²ggg½½½ÊÊÊÊÊËËËËËËËÌÌÌÝÝÝÝÝÝÝÝÜ²³³g½½½½½ÊÊÊÊËËËËËËÌÌÌÌÌÝÝÝÝÎÎÎÎ³³³³½½½½hhhhËËËËËËÌÌÌÌÌÌ\u0016\u0016ÎÎÎÎÎÎ³³³³½XXXhhhÉÉÉËËËÌÌÌÌÌÌÌÏÏÎÎÎÎÎÎ´´´´´XXXXÉÉÉÉÉÉËÌÌÌÌÌÌÏÏÏÏÎÎÎÎÎÎ´´´´´XXXffÉÉÉÉÉÉÌÌÌÌÌÏÏÏÏÏÏÎÎÎÎÎ´´´´´ffffffÉÉÉÉÉÍÍÍÍÏÏÏÏÏÏÏÐÎÎÎÎ´´´´´fffffffÉÉ\u0010\u0010\u0010\u0010ÍÍÏÏÏÏÏÏÐÐÐÐ××+++´´ffffffff\u0010\u0010\u0010\u0010\u0010\u0010ÍÏÏÏÏÏÏÐÐÐ×××+++++fffff¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÏÐÐÐÐ×××++++µ¼¼¼¼¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÐÐÐÐÐ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¿ÈÈÈÈÈÈÈÈÈÖµµµººº»»»»»»»»¾¾¾¾¿¿¿¿ÈÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿\u0011ÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿\u0011\u0011ÇÇÖÖÖÖÖ¶ºººººº»»»»»»À¿¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶¶ºººº»»»»ÀÀÀÀ¿¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶¶¶ºº»ÀÀÀÀÀÀÀ¿¿¿¿¿ÁÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶··ÀÀÀÀÀÀÀÀÀ¿¿ÁÁÁÁÇÇÇÇÇÇÇÇÖ········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇÇÇ\u0012\u0012········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇÇ\u0012\u0012\u0012--······ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇ\u0012\u0012\u0012\u0012-----···ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇ\u0012\u0012\u0012\u0012\u0012\u0001\u0001\u0094\u0094\u0094\u0094\u0094ô\u0018\u0018\u0018\u0018\u0018\u0017\u0017\u0017\u0017ßßßßÞÞÞÞÞÝÝ\u0015\u0015\u0015\u0015\u0001\u0002\u0002\u0002\u0094\u0094uu\u0018\u0018\u0018\u0018\u0018\u0018\u0017\u0017ßßßßßÞÞÞÞÝÝÝÝ\u0015\u0015\u0015\u0002\u0002\u0002\u0002\u0002uuu\u0018\u0018\u0018\u0018\u0018\u0018\u0017ßßßßßßÞÞÞÞÝÝÝÝÝ\u0015\u0015WWW\u0002uuuvv\u0018\u0018\u0018\u0018\u0018ßßßßßßßÞÞÞÝÝÝÝÝÝÝ\u0015WWWW\u0003\u0003vvvàÊÊÊÊËËßßßßßÞÞÞÝÝÝÝÝÝÝÝ²WWggggvvÊÊÊÊÊËËËËËßßÞÞÝÝÝÝÝÝÝÝÜ²²²ggg½½ÊÊÊÊÊËËËËËËËÌÌ\u0016\u0016ÝÝÝÝÝÝÜÜ²²²gg½½½hhÊÊÊËËËËËËÌÌÌ\u0016\u0016\u0016ÝÝÝÜÜÜÜ³³³³½½½½hhhhËËËËËËÌÌÌÌÌ\u0016\u0016\u0016\u0016ÎÎÎÎÎ³³³³XXXXhhhhÉÉËËËÌÌÌÌÌÌ\u0016\u0016\u0016ÎÎÎÎÎÎ³³´´XXXXXXÉÉÉÉÉtÌÌÌÌÌÌÏÏÏÏÏÎÎÎÎÎ´´´´´XXXXfÉÉÉÉÉtÍÍÍÍÌÏÏÏÏÏÏÎÎÎÎÎ´´´´´XfffffÉÉÉÉtÍÍÍÍÏÏÏÏÏÏÏÐÐÎÎÎ´´´´´fffffffÉÉi\u0010ÍÍÍÍÏÏÏÏÏÏÐÐÐÐ××++´´±ffffffffi\u0010\u0010\u0010\u0010ÍÍÏÏÏÏÏÐÐÐÐÐ××++++±ffff¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010ÍÏÏÏÏÏÐÐÐÐÐ××+µµµµ¼¼¼¼¼¼¼¼\u0010\u0010\u0010\u0010\u0010\u0010\u0010ÏÏÏÏÐÐÐÐÐÐ××µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµºº»»»»»»»»¾¾¾¾¿¿¿¿\u0011ÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¾¿¿¿¿¿¿¿\u0011\u0011\u0011ÈÈÈÈÖÖÖºººººº,»»»»»»»¿¿¿¿¿¿¿¿\u0011\u0011\u0011\u0011ÈÖÖÖÖÖ¶¶ººººº»»»»»»À¿¿¿¿¿¿¿¿\u0011\u0011ÇÇÇÇÖÖÖÖ¶¶¶¶ººº,»»»ÀÀÀÀ¿¿¿¿¿¿¿\u0011ÇÇÇÇÇÇÖÖÖ¶¶¶¶¶¶º,,ÀÀÀÀÀÀÀ¿¿¿¿ÁÁÁÇÇÇÇÇÇÇÖÖ········ÀÀÀÀÀÀÀÀÀ¿ÁÁÁÁÁÇÇÇÇÇÇÇÇÖ········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇÇ\u0012\u0012········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇ\u0012\u0012\u0012-·······¹¹ÀÀÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇ\u0012\u0012\u0012\u0012----····¹¹¹ÀÀÀÀÀÂÂÂÁÁÁÁÁÁÇÇ\u0012\u0012\u0012\u0012\u0012\u0001\u0094\u0094\u0094\u0094\u0094\u0094ôôôô\u0018óó\u0017\u0017ßßßßßßÞÞÞÞÝÝ\u0015\u0015\u0015\u0015\u0002\u0002\u0094\u0094\u0094\u0094\u0094ôôô\u0018\u0018\u0018ó\u0017ßßßßßßßÞÞÞÝÝÝÝ\u0015\u0015\u0015\u0002\u0002\u0002\u0094\u0094\u0094uvô\u0018\u0018\u0018\u0018\u0018ßßßßßßßßÞÞÝÝÝÝÝÝ\u0015\u0015WWWW\u0093uvvvv\u0018\u0018\u0018\u0018ßßßßßßßßÞÞÝÝÝÝÝÝÝ\u0015WWWW\u0003\u0003vvvvÊÊÊÊËËßßßßßßÞÝÝÝÝÝÝÝÝÝ²²Wgg\u0003\u0003vvÊÊÊÊÊËËËËßßßß\u0016ÝÝÝÝÝÝÝÜÜ²²²gggg½hÊÊÊÊËËËËËËË\u0016\u0016\u0016\u0016\u0016ÝÝÝÜÜÜÜ²²²ggg½½hhhÊÊËËËËËËÌÌ\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³½½½hhhhhwËËËËËÌÌÌ\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³XXXXhhhhhttËËËÌÌÌÌ\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³XXXXXXhÉÉttttÍÍÍÍÏÏÏÏÏÏÎÎÎÎÎ´´´´XXXXXXÉÉÉtttÍÍÍÍÍÏÏÏÏÏÏÐÎÎÎÎ´´´´´XXffffÉÉtttÍÍÍÍÍÏÏÏÏÏÐÐÐÐÎÎ´´±±±±ffffffiiiiÍÍÍÍÍÏÏÏÏÏÐÐÐÐÐ×±±±±±±ffffffiiiiiÍÍÍÏÏÏÏÏÐÐÐÐÐÐ×++±±±±f[¼¼¼¼iiii\u0010\u0010ÍÍÏÏÏÏÐÐÐÐÐÐÐ×µµµµµ¼¼¼¼¼¼¼¼¼¾¾¾¾¾¾ÏÏÏÏÐÐÐÐÐÐ××µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÐÐÐÐÐÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµµµ¼¼¼¼»»»¾¾¾¾¾¾¾¾\u0011\u0011ÈÈÈÈÈÈÈÈÒµµµµµ,,,»»»»»¾¾¾¾¾¾¿¿\u0011\u0011\u0011\u0011ÈÈÈÈÈÈÖµºººº,,,»»»»»»¾¿¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011ÈÈÈÖÖÖººººº,,,,»»»»»¿¿¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÖÖÖÖ¶¶ººº,,,,,»»»À¿¿¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011ÇÇÖÖÖÖ¶¶¶¶¶º,,,,,ÀÀÀÀ¿¿¿¿¿¿Á\u0011\u0011ÇÇÇÇÇÖÖÖ¶¶¶¶¶¶,,,,ÀÀÀÀÀÀ¿¿¿ÁÁÁÁÇÇÇÇÇÇÇÖÖ·······,,ÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇÇÇÖ········¹¹ÀÀÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇÇÇ\u0012\u0012·······¹¹¹¹¹ÀÀÀÀÁÁÁÁÁÁÁÁÁÇÇÇÇ\u0012\u0012\u0012·······¹¹¹¹¹¹ÀÀÀÁÁÁÁÁÁÁÁÁÇÇÇ\u0012\u0012\u0012\u0012--·····¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÁÁÇÇ\u0012\u0012\u0012\u0012\u0012\u0094\u0094\u0094\u0094\u0094\u0094\u0094ôôôôóóóóßßßßßßßßÞÞÝÝÝÝ\u0015\u0015\u0015\u0002\u0094\u0094\u0094\u0094\u0094\u0094ôôôôôóóóßßßßßßßßÞÞÝÝÝÝÝ\u0015\u0015W\u0002\u0094\u0094\u0094\u0093\u0093ôôôôôóóóßßßßßßßßÞÝÝÝÝÝÝÝ\u0015WWW\u0093\u0093\u0093vvvôô\u0018\u0018óßßßßßßßßßÞÝÝÝÝÝÝÝÝWWW\u0003\u0003\u0003\u0003vvvÊÊÊÊËßßßßßßßßÝÝÝÝÝÝÝÜÜ²²²\u0003\u0003\u0003\u0003vvÊÊÊÊÊËËËßßßß\u0016\u0016\u0016\u0016ÝÝÝÝÜÜÜ²²²ggg\u0004\u0004\u0004ÊÊÊwwËËËËËË\u0016\u0016\u0016\u0016\u0016\u0016ÝÜÜÜÜÜ²²²²gg\u0004\u0004hhhwwwËËËËËË\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³IIXhhhhwwwËËËËËÌ\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³XXXXhhhhwtttttÍÍ\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³XXXXXXhhtttttÍÍÍÍÍ\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÚ³³´´XXXXXYYtttttÍÍÍÍÍÍÏÏÏÏÏÐÚÚÚÚ´±±±±XYYYf[[ttttÍÍÍÍÍÏÏÏÏÏÐÐÐÐÚÚ±±±±±±[[[[[[iiiiÍÍÍÍÍÏÏÏÏÐÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiÍÍÍÍÏÏÏÏÐÐÐÐÐÐÐ±±±±±±[[[[[[iiiiiÍÍÍÍÏÏÏÐÐÐÐÐÐÐ×µµµ±±±¼¼¼¼¼¼¼iiii¾¾ÍÍÏÏØÐÐÐÐÐÐÐ×µµµµµ¼¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾ØØØÐÐÐÐÐÐÐ×µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ØØÈÈÈÈÈÈÈÈÒµµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾\u0011ÈÈÈÈÈÈÈÈÒÒµµµµµ,,,¼¼¼¼¼¾¾¾¾¾¾¾\u0011\u0011\u0011\u0011ÈÈÈÈÈÈÒÒµµµµ,,,,,,»»»¾¾¾¾¾¾¿\u0011\u0011\u0011\u0011\u0011\u0011ÈÈÈÈÒÒµµºº,,,,,,,»»»¾¾¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÈÈÒÒÒºººº,,,,,,,,»»¿¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÖÖÖÖ¶¶¶º,,,,,,,,,À¿¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÖÖÖÖ¶¶¶¶¶,,,,,,,ÀÀÀ¿¿¿¿¿Á\u0011\u0011\u0011\u0011\u0011ÇÇÇÖÖÖ·····,,,,,,ÀÀÀÀÀ¿¿ÁÁÁÁÁÁÇÇÇÇÇÇÅÅ······,,,¹¹¹ÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇÇÇÅÅ·······¹¹¹¹¹¹¹ÀÀÁÁÁÁÁÁÁÁÁÇÇÇÇÇÅÅ·······¹¹¹¹¹¹¹¹ÀÁÁÁÁÁÁÁÁÁÇÇÇÇ\u0012\u0012\u0012·······¹¹¹¹¹¹¹¹¹ÂÂÁÁÁÁÁÁÁÁÇÇ\u0012\u0012\u0012\u0012-······¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÂÇ\u0012\u0012\u0012\u0012\u0012\u0094\u0094\u0094\u0094\u0094\u0094\u0094ôôôôóóóóóßßßßßáááááÝÝÝ\u0015\u0015\u0015\u0095\u0094\u0094\u0094\u0094\u0094\u0094ôôôôóóóóßßßßßßááááÝÝÝÝÝ\u0015\u0015\u0095\u0095\u0095\u0094\u0093\u0093\u0093ôôôôôóóóßßßßßßááááÝÝÝÝÝÝ\u0015\u0095\u0095\u0095\u0093\u0093\u0093\u0093\u0084ôôôôóóóßßßßßßáááÝÝÝÝÝÝÝÜ\u0095\u0095\u0095\u0093\u0003\u0003\u0084\u0084\u0084\u0084\u0084ÊÊÊñßßßßßßáááÝÝÝÝÝÜÜÜ²²HHH\u0003\u0084\u0084\u0084\u0084wwwwËËËßßßß\u0016\u0016\u0016\u0016\u0016ÝÝÜÜÜÜ²²²HHH\u0004\u0004\u0004\u0085wwwwwËËËË\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²²²HH\u0004\u0004\u0004\u0004wwwwwxËËËË\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³III\u0004\u0004hhwwwwxxxxË\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³IIIXXhhhwwtttttÍÍ\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³³³IXXYYYYttttttÍÍÍÍ\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÚÚ³³±±YYYYYYYttttttÍÍÍÍÍÏÏÏÏÐÐÚÚÚÚ±±±±±YYYY[[[ttttÍÍÍÍÍÍÏÏÏÏÐÐÐÚÚÚ±±±±±±[[[[[[iiiiÍÍÍÍÍÍÏÏÏÐÐÐÐÐÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍÏÏÏÐÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiiÍÍÍÏØØØÐÐÐÐÐÐÐµ±±±±±[[[¼¼¼iiiiiiÍÍÍØØØØÐÐÐÐÐÐÐµµµµ±¼¼¼¼¼¼¼¼ii¾¾¾¾¾ØØØØØØÐÐÐÐÒÒµµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾rrrrÈÈÈÈÒÒÒµµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾rrrrÈÈÈÈÒÒÒµµµµµ,,,,,¼¼¼¾¾¾¾¾¾¾\u0011\u0011\u0011\u0011\u0011ÈÈÈÈÒÒÒµµµµ,,,,,,,,»¾¾¾¾¾¾\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÈÒÒÒÒµµµ,,,,,,,,,,»¾¾¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒ¶ºº,,,,,,,,,,,^¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒ¶¶¶,,,,,,,,,,,¿¿¿¿¿\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔ¶¶¶¶,,,,,,,,,ÀÀ¿¿¿¿Á\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÇÔÔÔ·····,,,,,,¹¹¹ÀÀÁÁÁÁÁÁÁ\u0011\u0011\u0011ÇÇÇÅÅÅ······,,,¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÇÇÇÇÅÅÅ·······¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÇÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÁÁÁÁÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÂÂÇ\u0012\u0012\u0012\u0012\u0095\u0094\u0094\u0094\u0094\u0094ôôôôóóóóóóßßßßáááááâââââ\u0015\u0015\u0095\u0095\u0095\u0094\u0094\u0094ôôôôôóóóóóßßßßáááááâââââ\u0015\u0015\u0095\u0095\u0095\u0095\u0093\u0093\u0093ôôôôóóóóñßßßßáááááâââÝÝÝ\u0015\u0095\u0095\u0095\u0095\u0093\u0093\u0093\u0084\u0084ôôôóóññßßßßáááááâÝÝÝÝÜÜ\u0095\u0095\u0095\u0095H\u0093\u0084\u0084\u0084\u0084\u0084\u0084wñññßßßßáááááÝÝÝÜÜÜÜ²²HHHH\u0084\u0084\u0084\u0084\u0085www\u0083\u0083ñßßß\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²²HHHH\u0004\u0004\u0085\u0085wwww\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²²²HII\u0004\u0004\u0004wwwwwxxxxx\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²³IIII\u0004\u0004\u0004wwwwxxxxxx\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ³³IIIIVV\u0005\u0005\u0005wxxxxxxyÍ\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤¤IVVYYYY\u0005\u0005tttttÍÍÍÍ\u0016\u0016\u0016\u0016\u0016\u0016ÜÚÚÚÚ¤¤±±VYYYYYYttttttÍÍÍÍÍÍ\u0016\u0016\u0016\u0016ÚÚÚÚÚ±±±±±YYYY[ZZttttÍÍÍÍÍÍÏÏÏÏÐÐÚÚÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍÏÏØØÐÐÐÚÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍØØØØÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiiÍÍÍØØØØØÐÐÐÐÐÐ±±±±±±[[[[[eeiiiiissØØØØØØØÐÐÐÐÒµµ±±±UU¼¼¼¼\\eeiiiissØØØØØØØÐÐÒÒÒµµµµµU¼¼¼¼¼\\\\\\¾¾¾¾¾¾rrrrrrrrÒÒÒÒµµµµµ,¼¼¼¼\\\\\\\\¾¾¾¾¾¾jrrrrrrÈÒÒÒÒµµµµ,,,,,,,\\\\\\¾¾¾¾¾jj\u0011\u0011\u0011\u0011\u0011ÈÒÒÒÒÒµµµ,,,,,,,,,,¾¾¾¾¾j\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒÒ°°°,,,,,,,,,,,^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒ°°,,,,,,,,,,,,^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¶¶¶,,,,,,,,,,,^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¶¶¶,,,,,,,,,,¹^^^^ÁÁ\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ····,,,,,,,¹¹¹¹^ÁÁÁÁÁÁ\u0011\u0011\u0011\u0011\u0011\u0011ÅÅÅÅ·····,,,¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁ\u0011ÇÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÇÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÁÁÁÁÁÁÁÁÁÇÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÃÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÃÃÅÅÅÅ\u0095\u0095\u0095\u0094\u0094\u0094ôôôôóóóóóóóßßááááááââââââå\u0095\u0095\u0095\u0095\u0093\u0093ôôôôóóóóóóñßßááááááâââââââ\u0095\u0095\u0095\u0095\u0093\u0093õõôôôóóóñññßßááááááâââââââ\u0095\u0095\u0095\u0095\u0093\u0093\u0084\u0084\u0084\u0084ôôóñññññßááááááâââââÜÜ\u0095\u0095\u0095\u0095H\u0092\u0084\u0084\u0084\u0084\u0084\u0085ññññññßááááááâââÜÜÜÜ\u0095\u0095HHHH\u0092\u0092\u0084\u0085\u0085ww\u0083\u0083\u0083ñññáá\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²²HHHH\u0004\u0004\u0085\u0085\u0085ww\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ²²IIII\u0004\u0004\u0085\u0085www\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤IIIII\u0004\u0005\u0005wwwxxxxxyy\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤¤IIVVV\u0005\u0005\u0005\u0005xxxxxyyy\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤¤¤VVVVY\u0005\u0005\u0005tttttyyyy\u0016\u0016\u0016\u0016\u0016\u0016ÚÚÚÚÚ¤¤¤¤VVYYYYZZtttttyÍÍÍÍ\u0016\u0016\u0016\u0016\u0016ÚÚÚÚÚ±±±±±YYYYZZZttttÍÍÍÍÍÍÍØØØØÚÚÚÚÚ±±±±±±[[[[[ZiiiiiÍÍÍÍÍØØØØØØÚÚÚÚ±±±±±±[[[[[[iiiiisssÍØØØØØØØÐÐÚÚ±±±±±±U[[[[eeiiiissssØØØØØØØÐÐÐÚ±±±±±UUUU[eeeeiiissssØØØØØØØØÐÒÒ±±±±±UUUU\\\\\\eeeiisssrrrrrrØØØÒÒÒµµµµUUUU\\\\\\\\\\\\\\\\¾ssjrrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\¾¾¾jjjrrrrrrrÒÒÒÒ°°°°,,,,,,\\\\\\\\\\^^jjjjj\u0011\u0011\u0011rrÒÒÒÒÒ°°°°,,,,,,,,,^^^^^jjj\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒÒ°°°,,,,,,,,,,^^^^^^j\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒ°°°,,,,,,,,,,^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯,,,,,,,,,,^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯,,,,,,,,,,^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ····,,,,,,¹¹¹¹¹^^^ÁÁÁÁ\u0011\u0011\u0011\u0011\u0011\u0011ÅÅÅÅ····,,,,¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁ\u0011\u0011\u0011ÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÅÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÁÁÁÁÃÃÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅ\"\"\"\"\"\"õôôôóóóóóóññáááááááââââââå\"\"\"\"\"õõõôôóóóóóñññáááááááââââââå\u0095\u0095\"\"\"õõõõôôóóóññññáááááááâââââââ\u0095\u0095\u0095\u0095\"õõõõõõòòññññññááááááââââââÜ\u0095\u0095\u0095\u0095H\u0092\u0092\u0092\u0092\u0084\u0085\u0085òññññññááááááââââÜÜÜ\u0095\u0095HHH\u0092\u0092\u0092\u0092\u0085\u0085\u0085w\u0083\u0083ññññááá\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ£££HHH\u0092\u0092\u0085\u0085\u0085ww\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ£££III==\u0085\u0085www\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤¤IIII=\u0005\u0005\u0005wxxxxxxyy\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÜ¤¤¤IIVVV\u0005\u0005\u0005\u0005xxxxxyyyy\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÚÚ¤¤¤¤VVVV\u0005\u0005\u0005\u0006xxxxyyyyy\u0016\u0016\u0016\u0016\u0016\u0016ÚÚÚÚÚ¤¤¤¤VVVYYZZ\u0006\u0006tttyyyyyy\u0016\u0016\u0016\u0016ÚÚÚÚÚÚ¥±±±±VYYZZZZZtttyyyÍÍÍØØØØØÚÚÚÚÚ±±±±±±U[ZZZZZiiisssssÍØØØØØØÚÚÚÚ±±±±±±UU[[[eeiiisssssØØØØØØØØÚÚÚ±±±±±UUUU[eeeeiisssssØØØØØØØØØÚÚ±±±±±UUUUUeeeeeisssssØØØØØØØØØÒÒ±±±±UUUUU\\\\\\\\eeessssrrrrrrrrrÒÒÒ°°°°UUUU\\\\\\\\\\\\\\\\333jrrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\\\]jjjjjrrrrrrÒÒÒÒ°°°°°,,,,\\\\\\\\\\]]^jjjjjjjrrrÒÒÒÒÒ°°°°,,,,,,,,\\]^^^^jjjj\u0011\u0011\u0011\u0011\u0011ÒÒÒÒÒ°°°°,,,,,,,,,^^^^^^jj\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÒÒÒÒ°°°,,,,,,,,,,^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯,,,,,,,,,,^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯¯,,,,,,,,,^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯¯,,,,,,¹¹¹¹^^^^^ÁÁ\u0011\u0011\u0011\u0011\u0011\u0011ÅÅÅÅÅ¯¯¯¯,,,,¹¹¹¹¹¹¹¹^ÁÁÁÁÁÁÁ\u0011\u0011ÅÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÃÅÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÃÃÅÅÅ\"\"\"\"\"\"õõôóóóóóóóññááááááââââââåå\u0096\"\"\"\"õõõõõóóóóññññááááááâââââââå\u0096\"\"\"\"õõõõõòòòòñññññáááááâââââââå\u0096\"\"\"\"õõõõõòòòññññññáááááâââââââÜ\u0096\"\"\"\"õõõõõ\u0085òòññññññáááááâââââÜÜÜ\u0096££££\u0092\u0092\u0092\u0092\u0085\u0085\u0085\u0083\u0083\u0083ññññáááá\u0016\u0016âââÜÜÜÜ£££££\u0092\u0092\u0092\u0085\u0085\u0085\u0085\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÜÜÜÜÛ££££I====\u0085\u0085w\u0083\u0083\u0083\u0083\u0083\u0083\u0083y\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛ¤¤¤III===\u0005\u0005\u0005\u0083\u0083\u0083\u0083\u0083yyy\u0016\u0016\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛ¤¤¤¤IVVV\u0005\u0005\u0005\u0005xxxxxyyyy\u0016\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛ¤¤¤¤VVVV\u0005\u0005\u0005\u0006\u0006xxxyyyyyy\u0016\u0016\u0016\u0016\u0016ÛÚÚÚÚ¤¤¤¤VVVVZZ\u0006\u0006\u0006\u0006tyyyyyyyy\u0016\u0016\u0016ÚÚÚÚÚÚ¥¥¥±±VVZZZZZ\u0006\u0006tyyyyyyyzØØØØÚÚÚÚÚ¥¥±±±±UUZZZZZiisssssszØØØØØØÚÚÚÚ¥±±±±UUUUUeeeeisssssssØØØØØØØÚÚÚ±±±±±UUUUUeeeeessssssØØØØØØØØÙÙÚ±±±±UUUUUU\\eeee3sssssØØØØØØØØØÒÒ°°±±UUUUU\\\\\\\\\\e333ssrrrrrrrrrÒÒÒ°°°°UUUU\\\\\\\\\\\\\\3333jjrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\]]jjjjjrrrrrrÒÒÒÒ°°°°°°,,\\\\\\\\\\]]]]jjjjjjÑÑÑÑÒÒÒÒÒ°°°°°,,,,,,\\]]]^^^jjjjjj\u0011ÑÑÒÒÒÒÒ°°°°,,,,,,,,]^^^^^^jjjj\u0011\u0011\u0011\u0011\u0011ÔÔÔÔ¯¯¯¯,,,,,,,,^^^^^^^^j\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯,,,,,,,,^^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯,,,,,,,,^^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯,,,,,,¹¹¹¹^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011\u0011ÅÅÅÅÅ¯¯¯¯¯,,¹¹¹¹¹¹¹¹¹^^ÁÁÁÁÁ\u0011\u0011\u0011ÅÅÅÅÅÅ¯¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÁÁÁÃÃÃÃÅÅÅÅÅ¯¯··¹¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÃÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÃÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÃÃÃÃÃÃÅÅÅ\u0096\"\"\"\"\"õõõóóóóóóñññááááááââââââåå\u0096\"\"\"\"õõõõõòòòòññññááááááââââââåå\u0096\"\"\"\"õõõõõòòòòñññññáááááâââââââå\u0096\u0096\"\"\"õõõõõòòòòñññññáááááâââââââå\u0096\u0096\"\"\"õõõõõòòòññññññáááááââââââÛÛ\u0096££££\u0092\u0092\u0092\u0092\u0085\u0085ò\u0083\u0083\u0083ññññáááááââââÛÛÛÛ££££££===\u0085\u0085\u0085\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0016\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ£££££======\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0083y\u0016\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ¤¤¤£I=====\u0005\u0005\u0083\u0083\u0083\u0083\u0083yyyy\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ¤¤¤¤¤VV=\u0005\u0005\u0005\u0006\u0006xxxyyyyy\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ¤¤¤¤¤VVV\u0005\u0005\u0006\u0006\u0006\u0006xxyyyyyy\u0016\u0016\u0016\u0016ÛÛÛÛÚÚ¥¤¤¤¤VVVZZ\u0006\u0006\u0006\u0006\u0006yyyyyyyzz\u0016{ÚÚÚÚÚÚ¥¥¥¥¤VGZZZZ\u0006\u0006\u0006\u0007yyyyyyzzzØØ{ÙÚÚÚÚ¥¥¥¥±UUUZZZZ\u0006\u0007\u0007sssssszzØØØØÙÙÙÚÚ¥¥¥±±UUUUUeeee\u0007sssssszØØØØØØÙÙÙÙ¥¥±±UUUUUUeeeeesssssszØØØØØØÙÙÙÙ**±UUUUUUU\\eeee333sssrrrrrrrrÙ\u0014\u0014°°°°UUUUU\\\\\\\\\\\\33333rrrrrrrrrÒÒÒ°°°°°UUU\\\\\\\\\\\\\\3333jjrrrrrrrrÒÒÒ°°°°°°U\\\\\\\\\\\\\\]]]2jjjjÑÑÑrrrÒÒÒÒ°°°°°°,\\\\\\\\\\]]]]]jjjjjjÑÑÑÑÑÒÒÒÒ°°°°°°,,,,\\]]]]]^^jjjjjjÑÑÑÑÒÒÒÒ°°°°°,,,,,,]]]^^^^^jjjjj\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯¯,,,,,,,^^^^^^^^jjj\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯¯,,,,,,,^^^^^^^^j\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯¯,,,,,,,^^^^^^^^^\u0011\u0011\u0011\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯¯,,,,¹¹¹¹^^^^^^^^\u0011\u0011\u0011\u0011\u0011ÆÆÅÅÅÅ¯¯¯¯¯¯,¹¹¹¹¹¹¹¹^^^^^ÁÁÁ\u0011ÃÃÅÅÅÅÅÅ¯¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÃÃÃÃÃÅÅÅÅÅ¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹¸ÂÂÂÂÂÃÃÃÃÃÃÅÅÅÅ¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¸¸ÂÂÂÂÂÃÃÃÃÃÃÃÅÅÅ···¹¹¹¹¹¹¹¹¹¹¹¸¸¸ÂÂÂÂÂÃÃÃÃÃÃÃÅÅÅ!!\"\"\"\"õõõòòòòòò\u0019\u0019\u0019\u0019ááááââââââååå\u0096\u0096\"\"\"õõõõòòòòòòññññááááâââââââåå\u0096\u0096\"\"\"õõõõõòòòòñññññááááâââââââåå\u0096\u0096\"\"\"õõõõõòòòòñññññááááââââââââå\u0096\u0096\u0096\"\"õõõõõòòòòñññññááááâââââââÛÛ\u0096£££££\u0092\u0092\u0092=òòò\u0083ññññññáááâââââÛÛÛÛ££££££=====\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0083á\u0016\u0016\u0016ãããÛÛÛÛÛ£££££======\u0083\u0083\u0083\u0083\u0083\u0083\u0083\u0083y\u0016\u0016\u0016\u0016\u0016ãÛÛÛÛÛÛ¤¤£££=====>\u0086\u0086\u0086\u0083\u0083\u0083yyyy\u0016\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ¤¤¤¤¤>>>>>\u0006\u0006\u0006\u0086\u0086\u0086yyyyyy\u0016\u0016\u0016\u0016ÛÛÛÛÛÛ¤¤¤¤¤GGGG\u0006\u0006\u0006\u0006\u0006\u0086yyyyyyyz\u0016\u0016\u0081ÛÛÛÛÛÛ¥¥¥¤GGGGG\u0006\u0006\u0006\u0006\u0006\u0006yyyyyyzzz{{{ÙÙÚÚÚ¥¥¥¥¥GGGGZ\u0006\u0006\u0006\u0007\u0007\u0007yyyyzzzz{{{ÙÙÙÙÚ¥¥¥¥JJJJJZZ\u0006\u0007\u0007\u0007\u0007sssszzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJUUee\u0007\u0007\u0007\u0007sssszzz{{{{{ÙÙÙÙ****UUUUUUeee\u0007\u0007333sszzz{{{{{ÙÙÙÙ****UUUUUU\\\\ee333333zzrrrrrrÙ\u0014\u0014\u0014****UUUUU\\\\\\\\\\3333332rrrrrrrr\u0014\u0014\u0014°°°°°UUU\\\\\\\\\\\\\\33322jÑÑÑÑrrrrÒÒÒ°°°°°°U\\\\\\\\\\\\]]]]22jjjÑÑÑÑÑÑÒÒÒÒ°°°°°°°\\\\\\\\\\]]]]]]jjjjjÑÑÑÑÑÒÒÒÒ°°°°°°,,,\\]]]]]]]^jjjjjjÑÑÑÑÒÒÒÒ°°°°°°,,,,]]]]]^^^^jjjjjjÑÑÔÔÔÔÔ¯¯¯¯¯,,,,,,]^^^^^^^^jjjj\u0011\u0011\u0011ÔÔÔÔÔ¯¯¯¯¯¯,,,,,^^^^^^^^^jjj\u0011\u0011\u0011ÆÔÔÔÔÔ¯¯¯¯¯¯,,,,,^^^^^^^^^^\u0011\u0011\u0011\u0011\u0011ÆÆÔÔÔÔ¯¯¯¯¯¯,,,¹¹¹¹^^^^^^^^\u0011\u0011\u0011\u0011ÆÆÆÆÆÔÔ¯¯¯¯¯¯¹¹¹¹¹¹¹¹^^^^^^^ÃÃÃÃÃÆÆÆÅÅÅ¯¯¯¯¯®¹¹¹¹¹¹¹¹¹¸¸¸ÂÂÂÃÃÃÃÃÃÃÅÅÅÅ¯¯¯¯®¹¹¹¹¹¹¹¹¹¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÅÅÅÅ¯¯®®®¹¹¹¹¹¹¹¹¸¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÃÅÅÅ¯®®®¹¹¹¹¹¹¹¹¸¸¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÃÃÅÅ!!!!\"\"õõõòòòòò\u0019\u0019\u0019\u0019\u0019\u0019áááâââââåååå\u0096\u0096\"\"\"õõõõòòòòòò\u0019\u0019\u0019\u0019ááááââââââååå\u0096\u0096\u0096\"\"õõõõòòòòòòññññááááââââââååå\u0096\u0096\u0096\"\"õõõõòòòòòòññññááááâââââââåå\u0096\u0096\u0096££õõõõõòòòòññññññáááâââââââÛÛ\u0096£££££õõ==òòòòññññññáááãããããÛÛÛÛ££££££>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086áãããããããÛÛÛÛ#££££>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082\u0016ãããããÛÛÛÛÛ##£££>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082\u0016ãããÛÛÛÛÛÛ#¤¤¤>>>>>>>\u0006\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0082\u0081\u0081\u0081ÛÛÛÛÛÛ¥¥¤¤GGGGGG\u0006\u0006\u0006\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0082z\u0081\u0081\u0081\u0081ÛÛÛÛÛ¥¥¥¥GGGGGG\u0006\u0006\u0006\u0006\u0007\u0082\u0082\u0082\u0082\u0082\u0082zzz\u0081\u0081ÙÙÙÙÙÚ¥¥¥¥GGGGGG\u0006\u0006\u0007\u0007\u0007\u0007\u0082\u0082\u0082zzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ44\u0007\u0007\u0007\u0007\u0007sszzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ44\u0007\u0007\u0007\u00073sszzzz{{{{ÙÙÙÙÙ****JJJJJJJ4\u0007\u0007\u00073333zzzz{{{{{ÙÙÙ\u0014****JJUUUTTTTT333333zz{{{{{{Ù\u0014\u0014\u0014****UUUUTTTTTT3333322ÑÑrrrrr\u0014\u0014\u0014\u0014°°°°°UUTTTTTTTT332222ÑÑÑÑÑÑÑÑ\u0014\u0014\u0014°°°°°°TTTTTTT]]]2222jjÑÑÑÑÑÑÑÒÒÒ°°°°°°°TTTT]]]]]]]jjjjjÑÑÑÑÑÑÒÒÒ°°°°°°°,TT]]]]]]]]jjjjjjÑÑÑÑÑÒÒÒ°°°°°°,,SS]]]]]]^^^jjjjjÑÑÑÑÔÔÔÔ¯¯¯¯¯¯,,SSS]]^^^^^^^jjjjjkkÔÔÔÔÔ¯¯¯¯¯¯¯,SSSS^^^^^^^^jjjkkkÆÆÆÔÔÔ¯¯¯¯¯¯¯,SSSS^^^^^^^^^jkkkkÆÆÆÆÔÔ¯¯¯¯¯¯¯,SS¹¹^^^^^^^^^kkkkÆÆÆÆÆÆÆ¯¯¯¯¯®®¹¹¹¹¹¹¹^^^^^^_ÃÃÃÃÆÆÆÆÆÆÅ¯¯¯¯®®®¹¹¹¹¹¹¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÆÆÆÅÅ¯¯®®®®¹¹¹¹¹¹¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÅÅÅ¯®®®®\u00AD¹¹¹¹¹¹¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÅÅÅ®®®®®\u00AD¹¹¹¹¹¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÅÅ!!!!!ÿÿÿÿòòòò\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ððâââââåååå!!!!\"ÿÿÿÿòòòòò\u0019\u0019\u0019\u0019\u0019\u0019áððâââââåååå\u0096\u0096\u0096\"\"ÿÿÿÿòòòòòò\u0019\u0019\u0019\u0019\u0019ððððâââââååå\u0096\u0096\u0096\u0096\"õõõõòòòòòòññññáððððâââââååå\u0096\u0096\u0096££õõõõòòòòòòñññññððððâââãããÛå\u0096£££££>>>>òòò\u0086\u0086\u0086ññññððãããããããÛÛÛ##£££>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086ãããããããããÛÛÛ###££>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082ãããããããÛÛÛÛ####>>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082ãããããÛÛÛÛÛ####>>>>>>>\u0086\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0081ÛÛÛÛÛ¥¥¥¤GGGGGGG\u0006\u0086\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0081ÛÛÛÛÛ¥¥¥¥GGGGGGG\u0006\u0006\u0007\u0007\u0082\u0082\u0082\u0082\u0082\u0082zz\u0081\u0081\u0081\u0081ÙÙÙÙÙ¥¥¥¥GGGGGG444\u0007\u0007\u0007\u0082\u0082\u0082zzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ444\u0007\u0007\u0007\u0007\u0082zzzzz{{{{ÙÙÙÙÙ****JJJJJJ444\u0007\u0007\u000733zzzzz{{{{ÙÙÙÙÙ****JJJJJJ444\u0007\u0007\b333zzzz{{{{{ÙÙ\u0014\u0014****JJJJJTTTTT\b33333zz{{{{{{\u0014\u0014\u0014\u0014*****JJTTTTTTT\b3332222ÑÑÑÑ{{\u0014\u0014\u0014\u0014°°°°°UTTTTTTTTT322222ÑÑÑÑÑÑÑ\u0014\u0014\u0014\u0014°°°°°°TTTTTTT]]]22222jÑÑÑÑÑÑÑ\u0014\u0014\u0014°°°°°°°TTTT]]]]]]22jjjjÑÑÑÑÑÑÓÓÓ°°°°°°°SSS]]]]]]]ddjjjjÑÑÑÑÑÓÓÓÓ°°°°°°SSSSS]]]]]^dddjjjjqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSS]]^^^^ddjjjkkkkkÆÔÔÔ¯¯¯¯¯¯¯SSSSSS^^^^^^__jkkkkkÆÆÆÆÔ¯¯¯¯¯¯¯SSSSSS^^^^^^__kkkkkÆÆÆÆÆÆ¯¯¯¯¯®®®SSSSS^^^^^___kkkkkÆÆÆÆÆÆ¯¯¯¯®®®®\u00AD\u00AD¹¹¸¸¸^^____kkkkÆÆÆÆÆÆÆ¯¯®®®®®\u00AD\u00AD\u00AD¹¹¸¸¸¸¸¸¸_`ÃÃÃÃÃÃÆÆÆÆÆ®®®®®®\u00AD\u00AD\u00AD\u00AD¹¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÆÆÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÄÄ!!!!!ÿÿÿÿÿòò\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ððððââååååå!!!!ÿÿÿÿÿÿòòò\u0019\u0019\u0019\u0019\u0019\u0019\u0019ððððððââåååå!!!!ÿÿÿÿÿÿòòòò\u0019\u0019\u0019\u0019\u0019\u0019ððððððââåååå\u0096\u0096\u0096\u0096ÿÿÿÿÿÿòòòòò\u0019\u0019\u0019\u0019ðððððððâââååå\u0096\u0096\u0096£ÿÿÿÿÿÿòòòòòñññöððððððãããããåå##££££>>>þþþ\u0086\u0086\u0086\u0086\u0086\u0086\u0086ððððãããããããÛÛ###££>>>>>þ\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086ããããããããããÛÛ####>>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082ããããããããÛÛÛ####>>>>>>>\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082ããããããÛÛÛÛ####>>>>>>??\u0086\u0086\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0081\u0081ÛÛÛÛ####GGGGGG???\u0086\u0086\u0082\u0082\u0082\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0081\u0081ÛÛÛÛ¥¥¥¥GGGGGG???4\u0007\u0082\u0082\u0082\u0082\u0082\u0082z\u0081\u0081\u0081\u0081\u0081\u0081ÙÙÙÙ¥¥¥¥GGGGGG4444\u0007\u0007\u0082\u0082\u0082zzzzz{{{ÙÙÙÙÙ****JJJJJJ4444\u0007\u0007\u0007\u0082zzzzz{{{{ÙÙÙÙÙ****JJJJJJ4444\u0007\b\b\bzzzzz{{{{ÙÙÙÙÙ****JJJJJJ¦444\b\b\b\b3zzzz{{{{{ÙÙ\u0014\u0014*****JJJJTTT¦\b\b\b\b\b322z{{{{{{\u0014\u0014\u0014\u0014*****JJTTTTTTT\b\b\b22222||||||\u0014\u0014\u0014\u0014***°°JTTTTTTTT\b2222222ÑÑ||||\u0014\u0014\u0014\u0014°°°°°°TTTTTTT]]]222222ÑÑÑÑÑÑÑÓÓÓ°°°°°°°TTTT]]]]]]d22jjÑÑÑqqqÓÓÓÓ°°°°°°SSSSS]]]]]ddddjjjqqqqqÓÓÓÓ°°°°°°SSSSSS]]]]dddddjjqqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSSS]]^dddddjkkkkkkÆÓÓÓ¯¯¯¯¯¯SSSSSSSS^^_____kkkkkkÆÆÆÆÆ¯¯¯¯¯®®SSSSSSS^______kkkkkkÆÆÆÆÆ¯¯¯¯®®®®SSSSSS^______kkkkkÆÆÆÆÆÆ¯¯®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸_____``kkkÆÆÆÆÆÆÆ®®®®®®®\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸```ÃÃÃÃÆÆÆÆÆÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÆÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÄÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÄÄÄ!!!!!ÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ðððððððååååå!!!!ÿÿÿÿÿÿÿò\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ðððððððååååå!!!!ÿÿÿÿÿÿÿòò\u0019\u0019\u0019\u0019\u0019\u0019ðððððððððåååå!!\u0097ÿÿÿÿÿÿÿÿòòòöööööðððððððððåååå\u0096\u0096\u0097ÿÿÿÿÿÿÿþþòòöööööððððððããããããå####ÿÿÿÿþþþþþ\u0086\u0086\u0086ööööðððããããããããä#####>>>þþþþþ\u0086\u0086\u0086\u0086\u0086\u0086öããããããããããää####>>>>>þþþ\u0086\u0086\u0086\u0086\u0086\u0086\u0086\u0087\u0087ãããããããããää####>>>>>>??\u0086\u0086\u0086\u0086\u0086\u0087\u0087\u0087\u0087\u0081\u0081ããããããäää####>>>>>????\u0086\u0086\u0086\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081ääää####GGGGG?????\u0086\u0087\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081äää¢¢¢¢GGGGG?????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081ÙÙÙÙ¥¥¥¥GGGGG??4444\u0087\u0087\u0087\u0087\u0087zzz\u0081\u0081\u0081\u0081ÙÙÙÙÙ****JJJJJF44444\u0007\b\u0087\u0087zzzz{{{{ÙÙÙÙÙ****JJJJJFF4444\b\b\b\bzzzz{{{{ÙÙÙÙ\u0014****JJJJJ¦¦¦¦¦\b\b\b\b\bzzz{{{{{{Ù\u0014\u0014\u0014*****JJJ¦¦¦¦¦¦\b\b\b\b\b22|||||||\u0014\u0014\u0014\u0014*****JJKKKKKKK\b\b\b22222||||||\u0014\u0014\u0014\u0014*****KKKKKKKKK\b2222222||||||\u0014\u0014\u0014\u0014°°°°°°KKKKKKK]]]222222||||||ÓÓÓÓ°°°°°°LLLLKK]]]]ddd22qqqqqqqÓÓÓÓ°°°°°°SSSSSS]]]]dddddqqqqqqqÓÓÓÓ¯¯¯¯¯SSSSSSSS]]ddddddqqqqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSSSS]ddddddkkkkkkkÓÓÓÓ¯¯¯¯¯®SSSSSSSS_______kkkkkkkÆÆÆÆ¯¯¯®®®®SSSSSSS_______kkkkkkÆÆÆÆÆ¯¯®®®®®®SSSSSS______``kkkkkÆÆÆÆÆ®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸_____```kkkkÆÆÆÆÆÆ®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸`````ccÃÆÆÆÄÄÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸```ÃÃÃÃÃÄÄÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸.ÃÃÃÃÃÃÃÄÄÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸¸.ÃÃÃÃÃÃÃÃÄÄÄ!!!!ÿÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ðððððððååååå!!!!ÿÿÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ððððððððåååå!!\u0097\u0097ÿÿÿÿÿÿÿÿ\u0019\u0019\u0019ööööðððððððððåååå\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿÿööööööööððððððððãååå\u0097\u0097\u0097\u0097ÿÿÿÿÿÿþþþöööööööðððððããããããä####ÿÿÿþþþþþþþööööööðððãããããããää#####>þþþþþþþþ\u0086\u0086ööööðãããããããããää#####>>þþþþþþ\u0086\u0086\u0086\u0086\u0086\u0087\u0087\u0087ããããããããäää#####>>>þþþ??\u0086\u0086\u0086\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081ããããääää#¢¢¢¢>>>??????\u0086\u0087\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081ääää¢¢¢¢¢GGG??????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081äää¢¢¢¢GGGG??????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081ÙÙä¢¢¢¢GGGG????444\u0087\u0087\u0087\u0087\u0087\u0087z\u0081\u0081\u0081\u0081\u0081\u0081ÙÙÙÙ****JJJJFFFF444\b\u0087\u0087\u0087\u0087zzz\u0081\u0081{{ÙÙÙÙÙ****JJJJFFFFF4\b\b\b\b\bzzzz{{{{ÙÙÙÙ\u0014*****JJJFF¦¦¦¦\b\b\b\b\b\bzz{{{{{{\u0014\u0014\u0014\u0014*****JJK¦¦¦¦¦¦\b\b\b\b\t\t\t|||||||\u0014\u0014\u0014\u0014*****JKKKKKKKK\b\b\t\t\t\t\t|||||||\u0014\u0014\u0014\u0014*****KKKKKKKKKK\t\t\t\t\t\t||||||||\u0014\u0014\u0014§§§§°KKKKKKKKK]\t\t\t\t\t\t\n" +
                "||||||ÓÓÓÓ°°°°°LLLLLLLL]]ddddd\n" +
                "\n" +
                "qqqqqqÓÓÓÓ°°°°¨SSSSSSSS]]ddddddqqqqqqqÓÓÓÓ¯¯¯¯¨SSSSSSSSSdddddddqqqqqqqÓÓÓÓ¯¯¯¯¯®SSSSSSSSddddd__kkkkkkkÓÓÓÓ¯¯¯®®®SSSSSSSS_______kkkkkkkÆÆÆÓ¯¯®®®®®SSSSSSS_______kkkkkkkÆÆÆÆ®®®®®®®®SSSSSS______``kkkkkÆÆÆÆÆ®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸____`````kkkÆÆÆÆÆÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸``````ccclÆÄÄÄÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸````cccclÄÄÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸....ÃÃÃÃÄÄÄÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸¸¸....ÃÃÃÃÃÄÄÄÄ!!!!ÿÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019\u0019ðððððððååååå!\u0097\u0097\u0097ÿÿÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019öööððððððððåååå\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿÿööööööööððððððððåååå\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿÿööööööööððððððððãååå\u0097\u0097\u0097\u0097ÿÿÿÿÿþþþþöööööööððððððããããää\u0097\u0097\u0097\u0097ÿÿÿþþþþþþöööööööðððãããããããää####ÿþþþþþþþþþööööööðããããããããäää###¢¢þþþþþþþþþ\u0086\u0086\u0086\u0087\u0087\u0087\u0087ããããããããäää¢¢¢¢¢>þþþþþþþ?\u0086\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0081\u0081ããããääää¢¢¢¢¢¢>???????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0081\u0081\u0081\u0081\u0081\u0081ääää¢¢¢¢¢GG???????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0081\u0081\u0081\u0081\u0081\u0081\u0081äää¢¢¢¢¢GG???????\u0087\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0081\u0081\u0081\u0081\u0081\u0081\u0081äää¢¢¢¢¢GG????5555\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0081\u0081\u0081\u0081\u0081\u0081ÙÙÙÙ****JJJFFFFF555@\u0087\u0087\u0087\u0087\u0089\u0089\u0089\u0081\u0081\u0081\u0081ÙÙÙÙÙ*****JJFFFFFFF@@\b\b\u0089\u0089\u0089\u0089\u0089\u0089{{{ÙÙÙ\u0014\u0014*****JJFFFF¦¦¦\b\b\b\b\b\u0089\u0089\u0089\u0089|||||\u0014\u0014\u0014\u0014*****JKKK¦¦¦¦¦\b\b\b\t\t\t\t|||||||\u0014\u0014\u0014\u0014§§§§§KKKKKKKKKK\t\t\t\t\t\t||||||||\u0014\u0014\u0014§§§§§KKKKKKKKKK\t\t\t\t\t\t\t|||||||\u0014\u0014\u0014§§§§§LLLLLLLKKK\t\t\t\t\t\n" +
                "\n" +
                "||||||}ÓÓÓ§¨¨¨¨¨LLLLLLLLL1111\n" +
                "\n" +
                "\n" +
                "qqqqqq}ÓÓÓ¨¨¨¨¨¨LLLLLLLLdddddd\n" +
                "\n" +
                "qqqqqq}ÓÓÓ¨¨¨¨¨¨SSSSSSSSddddddd\n" +
                "qqqqqppÓÓÓ¨¨¨¨®®SSSSSSSSS______kkkkkkppÓÓÓ¯®®®®®®SSSSSSS_______kkkkkkkooÓÓ®®®®®®®SSSSSSS______``kkkkkkoÆÆÆ®®®®®®®®\u00ADSSSSS____`````kkkklÆÆÆÄ®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD___``````ccclllÄÄÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸``````ccccllÄÄÄÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸`````ccccllÄÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸......cbblÄÄÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸¸¸.......bbÄÄÄÄÄ\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿ\u0019\u0019\u0019\u0019\u0019\u0019\u0019öððððððððåååå\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿööööööööððððððððåååå\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿööööööööððððððððåååå\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿööööööööðððððððððîîî\u0097\u0097\u0097\u0097\u0097ÿÿÿÿþþþööööööööððððððãããîîî\u0097\u0097\u0097\u0097\u0097ÿÿþþþþþþöööööööððððãããããäää¢¢¢¢¢þþþþþþþþþöööööööããããããããäää¢¢¢¢¢þþþþþþþþþþöö\u0087\u0087\u0087\u0088\u001Aããããããääää¢¢¢¢¢¢þþþþþþþþ\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0081\u0081ãããääää¢¢¢¢¢¢þ???????\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0081\u0081\u0081\u0081\u0081ääää¢¢¢¢¢¢????????\u0087\u0087\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0081\u0081\u0081\u0081\u0081ääää¢¢¢¢¢¢??????555\u0087\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0081\u0081\u0081\u0081\u0081\u0081äää¡¡¡¡¢¢???555555@\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0081\u0081\u0081\u0081\u0081\u0081æææ¡¡¡¡¡JFFFF5555@@@\u0087\u0087\u0089\u0089\u0089\u0089\u0089\u0081\u0081\u0081\u0081ÙÙææ*****$FFFFFF5@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0089{ÙÙ\u0014\u0014\u0014*****$$FFFFF¦@@@@@\u0089\u0089\u0089\u0089\u0089\u0089||||\u0014\u0014\u0014\u0014§§§§§$$KKK¦¦¦¦@@\t\t\t\t\u0089\u0089||||||\u0014\u0014\u0014\u0014§§§§§§KKKKKKKKK\t\t\t\t\t\t||||||||ççç§§§§§§LKKKKKKKK\t\t\t\t\t\t\n" +
                "||||||}ççç§§§§§LLLLLLLLL11111\n" +
                "\n" +
                "\n" +
                "\n" +
                "||||}}}ÓÓ§¨¨¨¨¨LLLLLLLLL1111\n" +
                "\n" +
                "\n" +
                "\n" +
                "qqqq}}}ÓÓ¨¨¨¨¨¨LLLLLLLLM1111\n" +
                "\n" +
                "\n" +
                "\n" +
                "qqqq}}}ÓÓ¨¨¨¨¨¨SSSSSSSMMMddd\n" +
                "\n" +
                "\n" +
                "qqqppppÓÓÓ¨¨¨¨¨¨SSSSSSSSM______\u000BkkkpppppÓÓ¨®®®®®®SSSSSSS______``kkkkkooooÓ®®®®®®®®SSSSSS_____````kkkkooooo®®®®®®®®\u00AD\u00ADSSSS___``````ccklllllÄ®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD__```````cccllllÄÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸```````cccclllÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸```..cccclllÄÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸.......bbbllÄÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸¸........bbbÄÄÄÄ\u0097\u0097\u0097\u0097\u0097ÿýýýýýý÷÷ööööööðïïïïïïïåååå\u0097\u0097\u0097\u0097\u0097ÿÿÿÿýýýööööööööðððïïïïïïååå\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿÿööööööööððððïïïïïîîî\u0097\u0097\u0097\u0097\u0097ÿÿÿÿÿÿööööööööööðððïïïïîîîî\u0097\u0097\u0097\u0097\u0097ÿÿÿÿþþþöööööööööððððïïãîîîî\u0097\u0097\u0097\u0097\u0097ÿþþþþþþþööööööööðððããããîîîî¢¢¢¢\u0097þþþþþþþþþöööööö\u001A\u001A\u001A\u001Aããããääää¢¢¢¢¢ þþþþþþþþþööö\u0087\u0088\u001A\u001A\u001A\u001A\u001A\u001Aããääää¢¢¢¢¢   þþþþþþþ\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u001A\u001A\u001A\u001A\u001Aäääää¢¢¢¢¢¢   ?????\u0087\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0088\u0088\u0081\u0081\u0081äääää¢¢¢¢¢¢ ??????55\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0088\u0088\u0081\u0081\u0081\u0081ääää¡¡¡¢¢¢????55555\u0087\u0087\u0087\u0087\u0088\u0088\u0088\u0088\u0088\u0081\u0081\u0081\u0081ææææ¡¡¡¡¡¡55555555@@@\u0087\u0087\u0088\u0088\u0088\u0088\u0088\u0081\u0081\u0081\u0081ææææ¡¡¡¡¡$$5555555@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0081\u0081\u0081ææææ¡¡¡¡$$$$F5555@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0080\u0080ææææ§§§§$$$$$FF5@@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0080\u0080\u0080\u0080\u0080ççç§§§§§$$$$KK¦@@@@@\t\t\u0089\u0089\u0089\u0080\u0080\u0080\u0080\u0080\u0080\u0080ççç§§§§§$$$KKKKKK@\t\t\t\t\t\t\u0080\u0080\u0080\u0080\u0080\u0080\u0080çççç§§§§§§LLLLLLLL111111\n" +
                "\n" +
                "\u0080\u0080\u0080\u0080\u0080\u0080}ççç§§§§§§LLLLLLLL111111\n" +
                "\n" +
                "\n" +
                "\u0080\u0080\u0080\u0080}}}çç¨¨¨¨¨¨LLLLLLLLM1111\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "q}}}}}}Ó¨¨¨¨¨¨LLLLLLLMMM111\n" +
                "\n" +
                "\n" +
                "\n" +
                "\u000Bqp}}}}}Ó¨¨¨¨¨¨)))LLLMMMMMRR\n" +
                "\n" +
                "\u000B\u000B\u000Bppppp}ÓÓ¨¨¨¨¨))))SSSMMMMRRRRR\u000B\u000B\u000BpppppooÕ¨¨¨®®))))SSSSMMRRRRRR`\u000Bkkooooooo®®®®®®®))SSSSMRRRRR````kkooooooo®®®®®®®®\u00AD\u00AD\u00ADSSRRRRR`````cccllllln®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00ADRR``````cccclllllÄ®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD```````cccclllllÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸```...ccbbblllÄÄ®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸........bbblllÄÄ®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸¸.........bbb\u0013\u0013\u0013\u0013\u0097\u0097\u0097\u0097\u0097ýýýýýý÷÷÷÷÷÷÷ööïïïïïïïïïïåå\u0097\u0097\u0097\u0097\u0097ýýýýýýý÷÷ööööööïïïïïïïïïïîî\u0097\u0097\u0097\u0097\u0097ýýýýýýýööööööööïïïïïïïïïîîî\u0097\u0097\u0097\u0097\u0097ýýýýýýýööööööööïïïïïïïïîîîî\u0097\u0097\u0097\u0097\u0097ýýýýýþþöööööööööïïïïïïïîîîî\u0097\u0097\u0097\u0097\u0097ý þþþþþþöööööööö\u001A\u001A\u001A\u001A\u001Aïîîîîî¢¢¢\u0097    þþþþþþöööööö\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîîî¢¢¢¢     þþþþþþööö\u0088\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aääää¢¢¢¢¢      þþþþ\u0091\u0091\u0091\u0088\u0088\u0088\u001A\u001A\u001A\u001A\u001A\u001A\u001Aääää¢¢¢¢¢       ??\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u001A\u001A\u001A\u001A\u001Aääää¡¡¢¢¢     ??555\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0081\u0081\u0081ææææ¡¡¡¡¡¡  5555555\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0081\u0081æææææ¡¡¡¡¡¡$5555555@@@\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u0088\u0081\u0081æææææ¡¡¡¡¡$$$55555@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0081æææææ¡¡¡¡$$$$$$55@@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0080æææææ§§§§$$$$$$$@@@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0080\u0080\u0080\u0080çççç§§§§$$$$$$$@@@@@@AA\u0089\u0089\u0089\u0080\u0080\u0080\u0080\u0080\u0080çççç§§§§§$$$$$LLL@@@1111\n" +
                "\u0080\u0080\u0080\u0080\u0080\u0080\u0080çççç§§§§§$$$LLLLLEE11111\n" +
                "\n" +
                "\u0080\u0080\u0080\u0080\u0080\u0080çççç§§§§§¨LLLLLLLLE11111\n" +
                "\n" +
                "\n" +
                "\u0080\u0080\u0080\u0080}}}çç¨¨¨¨¨¨LLLLLLLMM1111\n" +
                "\n" +
                "\n" +
                "\n" +
                "//}}}}}}}¨¨¨¨¨¨))LLLLMMMM111\n" +
                "\n" +
                "\n" +
                "\u000B//}}}}}}Õ¨¨¨¨¨¨))))LMMMMMMRR\n" +
                "\u000B\u000B\u000B\u000B\u000Bpppp}ÕÕ¨¨¨¨¨))))))MMMMMRRRR\u000B\u000B\u000B\u000B\u000BppppoÕÕ¨¨¨¨¨))))))MMMMRRRRRR\u000B\u000B\u000B\u000BooooooÕ¨®®®®®))))))MMRRRRRR```ccooooonn®®®®®®®))))\u00ADMRRRRR`````ccclllnnn®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00ADRRRR`````ccccllllln®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00ADR``````cccccllllll®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD```.....bbbbllll\u0013®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸........bbbbl\u0013\u0013\u0013®®®¬¬¬¬¬\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD¸¸.........bbb\u0013\u0013\u0013\u0013\u0097\u0097\u0097\u0097ýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïïî\u0097\u0097\u0097\u0097ýýýýýýýý÷÷÷÷÷÷÷öïïïïïïïïïïîî\u0097\u0097\u0097\u0097ýýýýýýýý÷÷ööööööïïïïïïïïïîîî\u0097\u0097\u0097\u0097ýýýýýýýýööööööööïïïïïïïïîîîî\u0097\u0097\u0097\u0097\u0097ýýýýýýýööööööööïïïïïïïïîîîî\u0097\u0097\u0097\u0097\u0097ý    þþþööööööö\u001A\u001A\u001A\u001A\u001A\u001Aïîîîîî¢¢\u0097\u0097       þþþööööö\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîîî¢¢¢¢         þþö\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîî¢¢¢¢          \u0091\u0091\u0091\u0091\u0091\u0088\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aääää¡¡¢¢         \u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u001A\u001A\u001A\u001A\u001A\u001Aääää¡¡¡¡¡      555\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u001A\u001A\u001Aæææææ¡¡¡¡¡¡   \u00995555\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u0088ææææææ¡¡¡¡¡¡$$55555@@@\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u0088ææææææ¡¡¡¡¡$$$$$55@@@@@\u0091\u0091\u0089\u0089\u0089\u0089\u0089\u0089\u0089ææææææ¡¡¡¡$$$$$$$5@@@@@@\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0089\u0080æææææ§§§$$$$$$$$6666666\u0090\u0090\u0089\u0089\u0089\u0089\u0080\u0080\u0080\u0080çççç§§§§$$$$$$$$66666AA\u0090\u0090\u0089\u008F\u0080\u0080\u0080\u0080\u0080çççç§§§§§$$$$$$$66EAAAAA\u008F\u008F\u008F\u0080\u0080\u0080\u0080\u0080çççç§§§§§$$$$LLLEEEEAAAA\n" +
                "\u008F\u008F\u0080\u0080\u0080\u0080\u0080çççç§§§§§¨$LLLLLEEEE1111\n" +
                "\n" +
                "\u008F\u0080\u0080\u0080\u0080}}ççç¨¨¨¨¨¨)LLLLLEEEE111\n" +
                "\n" +
                "\n" +
                "////}}}}}ç¨¨¨¨¨¨)))LLLMMMMM11\n" +
                "\u000B\u000B\u000B///}}}}ÕÕ¨¨¨¨¨))))))MMMMMMMR\u000B\u000B\u000B\u000B\u000B//pp}ÕÕÕ¨¨¨¨¨))))))MMMMMRRRR\u000B\u000B\u000B\u000B\u000BpppoÕÕÕ¨¨¨¨))))))))MMMRRRRRR\u000B\u000B\u000B\f\foooonÕ¨¨¨®))))))))MMRRRRRR``\f\f\f\foonnnn®®®®®®))))))MRRRRRR```ccccllnnnn®®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00ADRRRR```QQccccllllnn®®®®®®\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00ADRR``QQQQccbbbllllm®®®®®¬¬¬\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD\u00AD`QQQ...bbbbbllmm\u0013®®®¬¬¬¬¬¬¬¬¬¬\u00AD\u00AD........bbbbbmm\u0013\u0013®®¬¬¬¬¬¬¬¬¬¬¬¬¬.........bbbb\u0013\u0013\u0013\u0013\u0097\u0097\u0097ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïïî\u0097\u0097\u0097\u0097ýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïîî\u0097\u0097\u0097\u0097ýýýýýýýý÷÷÷÷÷÷÷ïïïïïïïïïïîîî\u0097\u0097\u0097\u0097ýýýýýýýý÷÷÷öööööïïïïïïïïîîîî\u0097\u0097\u0097\u0098ýýýýýýýýööööööööïïïïïïïíîîîî\u0098\u0098\u0098\u0098\u0098        öööööö\u001A\u001A\u001A\u001A\u001A\u001A\u001Aíîîîîî\u0098\u0098\u0098\u0098          öööö\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîîî¢¢¢            \u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîî¡¢¢¢          \u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîî¡¡¡¡        \u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u001A\u001A\u001A\u001A\u001A\u001A\u001Aææææ¡¡¡¡¡    \u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u001A\u001A\u001A\u001Aæææææ¡¡¡¡¡ \u0099\u0099\u0099\u0099\u0099\u00995\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088\u001Aææææææ¡¡¡¡¡$$$\u0099\u009955666\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088\u0088ææææææ¡¡¡¡ $$$$$$666666\u0091\u0091\u0091\u0089\u0089\u0089\u0089\u0089\u0089ææææææ    $$$$$$$666666\u0090\u0090\u0090\u0090\u0089\u0089\u0089\u0089\u0089\u0080æææææ    $$$$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u0089\u008F\u0080\u0080\u0080çççç§§§§$$$$$$$$6666AAA\u0090\u0090\u0090\u008F\u008F\u008F\u0080\u0080\u0080çççç§§§§$$$$$$$$7777AAAA\u008F\u008F\u008F\u008F\u008F\u0080\u0080\u0080çççç§§§§\u009F$$$$$$EEEEEAAAA\u008F\u008F\u008F\u008F\u008F\u0080\u0080\u0080çççç§§§\u009F\u009F\u009F$$LLLEEEEEEAAA\u008F\u008F\u008F\u008F\u008F\u0080\u0080}}ççç¨¨¨¨¨¨)))LLEEEEE0000\n" +
                "/////}}}}Õç¨¨¨¨¨))))))MMMMM0000\u000B\u000B/////}}ÕÕÕ¨¨¨¨¨))))))MMMMMM00\u000B\u000B\u000B\u000B////pÕÕÕÕ¨¨¨¨))))))))MMMMNNNN\u000B\u000B\u000B\u000B/\fppÕÕÕÕ¨¨¨¨))))))))MMMNNNNNN\u000B\u000B\f\f\f\fonnnÕ¨¨¨¨))))))))MMNNNNNNNQ\f\f\f\f\fnnnnn®®®®))))))))©NNNNNNQQQQ\f\f\f\fnnnnn®®®®®®)))))©©NNNNNQQQQQQccllnnnn®®®®®¬¬¬¬¬¬¬¬¬NNQQQQQQQbbbblmmmm®®®¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQbbbbmmmmm®®¬¬¬¬¬¬¬¬¬¬¬¬¬........bbbbmmm\u0013\u0013¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬.........bbbmm\u0013\u0013\u0013\u0097\u0097\u0097ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïï\u001B\u001B\u0097\u0097\u0098ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïííî\u0098\u0098\u0098\u0098ýýýýýýýý÷÷÷÷÷÷÷÷ïïïïïïïïííîî\u0098\u0098\u0098\u0098ýýýýýýýý÷÷÷÷÷÷÷ïïïïïïïïíííîî\u0098\u0098\u0098\u0098\u0098ýýýýýýýüüüüüüüïïïïïïïíííîîî\u0098\u0098\u0098\u0098\u0098\u0098      üüüüüüü\u001A\u001A\u001A\u001A\u001A\u001Aíííîîîî\u0098\u0098\u0098\u0098\u0098        üüüüü\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aíîîîî\u0098\u0098\u0098           ü\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîîî¡¡¡         \u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîî¡¡¡¡     \u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001Aææææ¡¡¡¡  \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001Aæææææ¡¡¡¡¡\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u001A\u001A\u001Aæææææ¡¡    \u0099\u0099\u0099\u0099\u0099\u0099666\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0088\u0088\u0088\u0088ææææææ     $$$$$$666666\u0091\u0091\u0090\u0090\u0090\u0090\u0089\u0089\u0089ææææææ     $$$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008Fæææææ    $$$$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008F\u008Fçççç§§\u009F\u009F$$$$$$$$7777AA\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008F\u008F\u008Fçççç§\u009F\u009F\u009F\u009F$$$$$$77777AAAA\u008F\u008F\u008F\u008F\u008F\u008F\u008Fççççç\u009F\u009F\u009F\u009F\u009F\u009F$$$$$EEEEEAAAA\u008F\u008F\u008F\u008F\u008F\u008F\u008Fççççç\u009F\u009F\u009F\u009F\u009F\u009F\u009F$$$EEEEEEEAAA\u008F\u008F\u008F\u008F\u008E\u008E\u008E}çççç\u009F\u009F\u009F\u009F\u009F\u009F))))EEEEEE00000//////}èèèè¨¨¨¨¨))))))EEEE00000\u000B//////}ÕÕÕÕ¨¨¨¨¨))))))MMMMM0000\u000B\u000B/////ÕÕÕÕÕ¨¨¨¨))))))))MMMMNNNNN\u000B\u000B\f\f\f\f\fÕÕÕÕ¨¨¨¨))))))))MMNNNNNNN\f\f\f\f\f\f\fnnné¨¨¨)))))))))©NNNNNNNNO\f\f\f\f\fnnnnn¨¨®)))))))©©©©NNNNNQQQQ\f\f\f\fnnn~~®®®®)))))©©©©©NNNNQQQQQQQ\n" +
                "\n" +
                "\n" +
                "n~~~®®®¬¬¬¬¬¬¬¬¬©©©NQQQQQQQQbbbmmmmm®¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQbbbbmmmmm(¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQ.bbbbmmmm\u0013(¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬........bbbmm\u0013\u0013\u0013\u0098\u0098\u0098ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïï\u001B\u001B\u001B\u0098\u0098\u0098\u0098ýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïíííí\u0098\u0098\u0098\u0098\u0098ýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïííííî\u0098\u0098\u0098\u0098\u0098ýýýýýýýüüüüüüüüïïïïïïíííííî\u0098\u0098\u0098\u0098\u0098\u0098ýýýýýüüüüüüüüüïïïïííííííîî\u0098\u0098\u0098\u0098\u0098\u0098     üüüüüüüüü\u001A\u001A\u001A\u001Aííííííîî\u0098\u0098\u0098\u0098\u0098       üüüüüüü\u001A\u001A\u001A\u001A\u001A\u001A\u001Aíííîîî\u0098\u0098\u0098\u0098         üüüü\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aíîîî¡¡¡       \u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aîîî¡¡¡¡   \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001Aææææ¡¡¡¡\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001Aææææ¡¡   \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001Aæææææ      \u0099\u0099\u0099\u0099\u0099\u0099\u009966\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0090\u0088æææææææ      $$$$\u009966666\u0091\u0091\u0091\u0090\u0090\u0090\u0090\u0090\u0090\u0090ææææææ     $$$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008Fëëëëë     $$$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008Fëëëëë  \u009F\u009F$$$$$$$777777A\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008F\u008F\u008Fçççç\u009F\u009F\u009F\u009F\u009F$$$$$$77777AAAA\u008F\u008F\u008F\u008F\u008F\u008F\u008F\u008Fçççç\u009F\u009F\u009F\u009F\u009F\u009F$$$$777777AAAA\u008F\u008F\u008F\u008F\u008F\u008F\u008E\u008Eçççç\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009F$EEEEEEE00AA\u008E\u008E\u008E\u008E\u008E\u008E\u008E\u008Eèèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F)))EEEEE00000B\u008E\u008E\u008E\u008E\u008E\u008E\u008Eèèèè\u009F\u009F\u009F\u009F\u009F\u009F)))))EEE000000BB\u008E\u008E//\u008D\u008Dèèèè¨¨¨¨))))))))MM000000BB///\u008D\u008D\u008DÕÕÕÕ¨¨¨¨))))))))MMMNNNNNND\f\f\f\f\f\u008Déééé¨¨¨)))))))))©MNNNNNNND\f\f\f\f\f\féééé¨¨¨)))))))©©©©NNNNNNOO\f\f\f\f\f\fn~~~ªªª))))))©©©©©NNNNNOOOO\f\f\f\n" +
                "\n" +
                "~~~~ªªªª)))©©©©©©©©NNNQQQQQQ\n" +
                "\n" +
                "\n" +
                "\n" +
                "~~~~ªª¬¬¬¬¬¬¬¬¬©©©©NQQQQQQQQQ\n" +
                "\n" +
                "\n" +
                "mmm~((¬¬¬¬¬¬¬¬¬¬¬©©QQQQQQQQQbbmmmmmm((¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQQbbmmmmmm((¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQ......bbmmmm\u0013\u0013\u0098\u0098\u0098\u0098ýýýýýý÷÷÷÷÷÷÷÷÷÷÷ïïïïïï\u001B\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098ýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïíííí\u001B\u001B\u0098\u0098\u0098\u0098\u0098ýýýýýýüüüüüüüüüïïïïïííííííí\u0098\u0098\u0098\u0098\u0098\u0098ýýýýýüüüüüüüüüïïïïíííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098ýýýüüüüüüüüüüüïïííííííííî\u0098\u0098\u0098\u0098\u0098\u0098\u0098    üüüüüüüüü\u001A\u001A\u001Aííííííííî\u0098\u0098\u0098\u0098\u0098\u0098      üüüüüüüü\u001A\u001A\u001A\u001A\u001Aíííííîî\u0098\u0098\u0098\u0098\u0098      \u0099\u0099üüüüûû\u001A\u001A\u001A\u001A\u001A\u001A\u001Aííííîî\u0098\u0098\u0098\u0098    \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001A\u001Aíîîî¡¡¡\u009B\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001Aææææ    \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001Aææææ     \u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001Aæææææ      \u0099\u0099\u0099\u0099\u0099\u0099\u009966\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0090ùùëëëëææ       \u0099\u0099\u0099\u0099\u00996666\u0091\u0091\u0090\u0090\u0090\u0090\u0090\u0090ùùëëëëëë      $$$$$666666\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u008Fëëëëëë     $$$$$$777777\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008Fëëëëë   \u009F\u009F$$$$$$777777A\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008F\u008F\u008Fëëëë\u009F\u009F\u009F\u009F\u009F\u009F$$$$7777777AAA\u0090\u008F\u008F\u008F\u008F\u008F\u008F\u008Fçççç\u009F\u009F\u009F\u009F\u009F\u009F\u009F$$$7777788AAA\u008F\u008F\u008E\u008E\u008E\u008E\u008E\u008Eèèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009F$EEEE88888AA\u008E\u008E\u008E\u008E\u008E\u008E\u008E\u008Eèèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009F))EEEE88000BBB\u008E\u008E\u008E\u008E\u008E\u008Aèèèè\u009F\u009F\u009F\u009F\u009F\u009F)))))EEE00000BBBB\u008E\u008E\u008D\u008D\u008D\u008Aèèè\u009F\u009F\u009F\u009F\u009F)))))))M000000BBBB\u008D\u008D\u008D\u008D\u008D\u008Dééé¨¨¨\u009D)))))))©©MNNNNNDDDD\u008D\u008D\u008D\u008D\u008D\u008Cééé¨¨\u009D\u009D))))))©©©©NNNNNDDDD\f\f\f\u008C\u008C\u008Céééªªªª))))©©©©©©©NNNNOOOO\f\f\f\n" +
                "\u008C\u008Céééªªªªª))©©©©©©©©NNNOOOOOO\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "~~~ªªªªª¬©©©©©©©©©©NOOOOOOO\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "~~~ªªªª¬¬¬¬¬©©©©©©©OOQQQQQQ\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "~\u007F\u007F(((¬¬¬¬¬¬¬¬¬©©©©QQQQQQQPPP\n" +
                "mmmaa(((¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQPPPmmmaaa(((¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQPPPPmmaaaa\u001F\u001F\u001F\u0098\u0098ýýýýý÷÷÷÷÷÷÷÷÷÷÷ïïïïï\u001B\u001B\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098ýýýýý÷÷÷÷÷÷÷÷÷ïïïïïííí\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098ýýýýüüüüüüüüüüüïïïííííííí\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098ýýýüüüüüüüüüüüïïííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098ýüüüüüüüüüüüüïíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098  üüüüüüüüüüü\u001Aíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098    üüüüüüüûûû\u001A\u001A\u001Aíííííííí\u0098\u0098\u0098\u0098\u0098\u0098   \u0099\u0099\u0099üüüüûûûûû\u001A\u001A\u001A\u001Aííííííî\u009A\u009A\u009A\u009A\u009A\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099ûûûûûûû\u001A\u001A\u001A\u001A\u001A\u001Aííììì\u009A\u009A\u009A\u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u001A\u001A\u001A\u001A\u001A\u001A\u001Aìììì   \u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091øøøøøøøìììì    \u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u0099\u0099\u0091\u0091\u0091\u0091\u0091\u0091\u0091\u0091øøøøøëëëëë     \u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u009C\u009C\u0091\u0091\u0091\u0091\u0091\u0091\u0091ùùùùùëëëëë      \u009B\u009B\u0099\u0099\u0099\u0099\u009C666\u0091\u0091\u0090\u0090\u0090\u0090\u0090ùùùùëëëëë       $$$$666677\u0090\u0090\u0090\u0090\u0090\u0090\u0090ùùëëëëëë      $$$$$777777\u0090\u0090\u0090\u0090\u0090\u0090\u008F\u008F\u008Fëëëëëë    \u009F\u009F$$$$77777777\u0090\u0090\u0090\u0090\u008F\u008F\u008F\u008F\u008Fëëëëë\u009F\u009F\u009F\u009F\u009F\u009F\u009F$$$77777788AA\u0090\u008F\u008F\u008F\u008E\u008E\u008E\u008Eèèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009E$777888888A\u008E\u008E\u008E\u008E\u008E\u008E\u008E\u008Aèèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E888888888BB\u008E\u008E\u008E\u008E\u008E\u008E\u008A\u008Aèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E88888899BBB\u008E\u008E\u008E\u008E\u008A\u008A\u008Aèèè\u009F\u009F\u009F\u009F\u009F\u009D\u009D\u009D\u009D\u009E\u009E88889999BBBBB\u008D\u008D\u008D\u008A\u008A\u008Aèè\u009F\u009F\u009F\u009F\u009D\u009D\u009D\u009D\u009D\u009D)©8999999BBBB\u008D\u008D\u008D\u008D\u008D\u008Aééé\u009F\u009F\u009D\u009D\u009D\u009D\u009D\u009D\u009D)©©©©999NDDDDD\u008D\u008D\u008D\u008D\u008D\u008Céééªªª\u009D\u009D\u009D\u009D\u009D©©©©©©©NNNDDDDDD\u008D\u008D\u008C\u008C\u008C\u008Cééªªªª\u009D\u009D\u009D©©©©©©©©NNNDDDDDD\f\n" +
                "\u008C\u008C\u008C\u008Cééªªªªª\u009D©©©©©©©©©©NOOOOOOO\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "~~~ªªªªªª©©©©©©©©©©OOOOOOOO\n" +
                "\n" +
                "\n" +
                "\n" +
                "\n" +
                "\u007F\u007F\u007Fªªªªª¬¬©©©©©©©©©OOOOOOOPPP\n" +
                "\n" +
                "\u000E\u007F\u007F\u007F((((¬¬¬¬¬¬¬©©©©©OOOOOOPPPPP\u000E\u000Eaaa((((¬¬¬¬¬¬¬¬¬©©©QQQQQPPPPPP\u000Eaaaa((((¬¬¬¬¬¬¬¬¬¬¬¬QQQQPPPPPPPaaaaa\u001F\u001F\u001F\u001F\u001F\u001Fýýýý÷÷÷÷÷÷÷÷÷÷÷ïïï\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u0098\u0098\u0098\u0098ýýýüüüüüüüüüüüïïïíí\u001B\u001B\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098ýýüüüüüüüüüüüüïííííííí\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098ýüüüüüüüüüüüüüíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüüüíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüûûûíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098 \u0099üüüüüüüûûûûûûííííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u0099\u0099\u0099\u0099\u0099\u0099üüûûûûûûûûøøøííííííì\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u0099ûûûûûûûûøøøøøøøìììì\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u0099ûûûûûûøøøøøøøøìììì  \u009B\u009B\u009B\u009B\u009B\u009B\u0099\u0099\u0099\u0099\u0099\u009C\u009C\u009Cûûûûøøøøøøøøìììì   \u009B\u009B\u009B\u009B\u009B\u009B\u0099\u0099\u0099\u009C\u009C\u009C\u009C\u0091\u0091\u0091\u0091øøøøøøøùìììì    \u009B\u009B\u009B\u009B\u009B\u0099\u0099\u009C\u009C\u009C\u009C\u009C\u009C\u0091\u0091\u0091ùùùùùùùùëëëë     \u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u0090\u0090ùùùùùùùëëëëë      \u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u0090\u0090ùùùùùùëëëëë       $$$\u009C777\u001E\u001E\u001E\u001E\u001E\u0090\u0090\u0090ùùùùùëëëëë%%% \u009F\u009F$$$$777777\u001E\u001E\u001E\u0090\u0090\u0090\u008F\u008F\u008F\u008Fëëëëëë\u009F\u009F\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E7778888888ú\u008E\u008E\u008E\u008E\u008E\u008E\u001C\u001C\u001C\u001C\u001C\u009F\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E888888888B\u008E\u008E\u008E\u008E\u008E\u008E\u008A\u008Aèèè\u009F\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E888888899BB\u008E\u008E\u008E\u008E\u008A\u008A\u008A\u008Aèè\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E88888999BBBB\u008E\u008E\u008A\u008A\u008A\u008A\u008Aèè\u009F\u009F\u009F\u009F\u009D\u009D\u009D\u009D\u009E\u009E\u009E\u009E8899999BBBBB\u008D\u008D\u008A\u008A\u008A\u008A\u008Aè\u009F\u009F\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D©&999999:BBB\u008D\u008D\u008D\u008D\u008A\u008A\u008A\u008Aéª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D©©©&&&9:::DDD\u008D\u008D\u008D\u008D\u008D\u008C\u008Cééªªª\u009D\u009D\u009D\u009D\u009D\u009D©©©©©©&&:DDDDDD\u008D\u008D\u008C\u008C\u008C\u008Cééªªªª\u009D\u009D\u009D\u009D©©©©©©©©&DDDDDDDC\u008C\u008C\u008C\u008C\u008C\u008Cêªªªªªª\u009D©©©©©©©©©©OOOOOOO<\n" +
                "\n" +
                "\n" +
                "\n" +
                "\u008C\u007F\u007Fªªªªªª«©©©©©©©©©OOOOOOOP<<\n" +
                "\n" +
                "\n" +
                "\u007F\u007F\u007Fªªªªª«««««©©©©©©OOOOOOPPPPP\u000E\u000E\u000E\u007F\u007F(((((«««««««©©©©OOOOOPPPPPP\u000E\u000E\u000E\u000Ea(((((¬¬««««««««©OOOOPPPPPPP\u000E\u000Eaaa(((((¬¬¬¬¬¬«««««'''''''PPPP\u000Eaaaa\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Fýüüüüüüüüüüüüï\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u001F\u0098\u0098ýüüüüüüüüüüüüüíí\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüüüüííííí\u001B\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüüüüíííííííí\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüüûûíííííííííí\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüûûûûûííííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u0099üüüüüüûûûûûûûûøíííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009B\u0099\u0099\u0099\u0099ûûûûûûûûûûøøøøøííììì\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u0099\u0099\u0099ûûûûûûûûûøøøøøøøìììì\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u0099\u0099\u0099\u009C\u009Cûûûûûûøøøøøøøøìììì\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u0099\u009C\u009C\u009C\u009C\u009Cûûûøøøøøøøøøìììì  \u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009Cûûøøøøøøøøùìììì   \u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001Eùùùùùùùùùëëëë    \u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001Eùùùùùùùùëëëë%    \u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùùùùëëëë%%%%% \u009B\u009B\u009B\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùùëëëëë%%%%%%\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúúúùù\u001C\u001C\u001C\u001C\u001C\u001C%%%%\u009F\u009F\u009E\u009E\u009E\u009E\u009E888\u001E\u001E\u001E\u001E\u001E\u001Eúúúúúúú\u001C\u001C\u001C\u001C\u001C\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E888888889úúúúúú\u008A\u008A\u008A\u001C\u001C\u001C\u009F\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E\u009E88888999úúúúúú\u008A\u008A\u008A\u008A\u008Aè\u009F\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E88899999BBúúú\u008A\u008A\u008A\u008A\u008A\u008Aè\u009F\u009F\u009F\u009D\u009D\u009D\u009D\u009E\u009E\u009E\u009E\u009E89999999BBBúú\u008A\u008A\u008A\u008A\u008A\u008A\u008A\u009F\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009E&&&999:::BBB\u008D\u008D\u008A\u008A\u008A\u008A\u008Aêªª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D©&&&&&::::;;;\u001D\u008D\u008D\u008C\u008Cêêêªªª\u009D\u009D\u009D\u009D\u009D\u009D©©©©©&&&&::;;;;\u001D\u001D\u008C\u008C\u008Cêêêªªªªª\u009D\u009D\u009D©©©©©©©&&&D;;;;;CCCCCêêêªªªªªª\u009D©©©©©©©©©&&;;;;;;<CCCC\u008B\u008B\u007Fªªªªªª«««©©©©©©©©OOOOOO<<<<<\u000E\u008B\u007F\u007Fªªªªª«««««««©©©©OOOOOPPPPP<<\u000E\u000E\u000E\u007F(((((«««««««««©©OOOOPPPPPPP\u000E\u000E\u000E\u000E\u000E(((((«««««««««««O'''''PPPPP\u000E\u000E\u000Eaa((((((««««««««««''''''''''P\u000E\u000Eaa\u000F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Füüüüüüüüüüüüü\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Füüüüüüüüüüüüüü\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u001F\u0098\u0098üüüüüüüüüüüüüüííí\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüüüüíííííí\u001B\u001B\u001B\u001B\u0098\u0098\u0098\u0098\u0098\u0098\u0098\u0098üüüüüüüüüüüûûûûííííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009Aüüüüüüüüûûûûûûûííííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009Aüüüüûûûûûûûûûûøøíííííìì\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u0099ûûûûûûûûûûûøøøøøøìììì\u009A\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009Cûûûûûûûûûøøøøøøøìììì\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009Cûûûûûûøøøøøøøøìììì\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009Cûûûøøøøøøøøøìììì\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009Cûøøøøøøøøùìììì  \u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001Eùùùùùùùùùìììì%%%\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001Eùùùùùùùùùëëëë%%%%%\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùùùùëëëë%%%%%%\u009B\u009B\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùù\u001C\u001C\u001C\u001C\u001C%%%%%%\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúúùùùù\u001C\u001C\u001C\u001C\u001C%%%%%\u009E\u009E\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúúúúúúú\u001C\u001C\u001C\u001C\u001C%%%%\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E8888\u001E\u001E\u001Eúúúúúúúú\u008A\u001C\u001C\u001C\u001C\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E88889999úúúúúú\u008A\u008A\u008A\u008A\u008A\u001C\u009F\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E88999999úúúúúú\u008A\u008A\u008A\u008A\u008A\u008A\u009F\u009F\u009D\u009D\u009D\u009D\u009E\u009E\u009E\u009E\u009E\u009E&&99999::úúúú\u008A\u008A\u008A\u008A\u008A\u008A\u008Aª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009E\u009E&&&&&::::::\u001D\u001D\u001D\u001D\u008A\u008A\u008Aêêªª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D©&&&&&&:::;;\u001D\u001D\u001D\u001D\u001Dêêêêªªªª\u009D\u009D\u009D\u009D\u009D\u009D©©©&&&&&::;;;;\u001D\u001D\u001DCêêêêªªªªª\u009D\u009D\u009D\u009D©©©©©&&&&;;;;;;CCCCCêêêªªªªªªª««©©©©©©&&&;;;;;;<CCCC\u008B\u008B\u008Bªªªªªª«««««©©©©©&&;;;;<<<<<<\u008B\u008B\u008B\u008Bªªªªª«««««««««©©©OOOPPPPP<<<\u000E\u000E\u000E\u008B(((((««««««««««««O'''PPPPPP\u000E\u000E\u000E\u000E\u000E(((((«««««««««««'''''''''PP\u000E\u000E\u000E\u000F\u000F((((((««««««««««'''''''''''\u000E\u000F\u000F\u000F\u000F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Füüüüüüüüüüüü\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Füüüüüüüüüüüüü\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Füüüüüüüüüüüüüüíí\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001B\u001F\u001F\u001F\u001F\u001F\u0098\u0098\u0098üüüüüüüüüüüüûûûíííí\u001B\u001B\u001B\u001B\u001B\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009Aüüüüüüüüüûûûûûûííííííí\u001B\u001B\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009Aüüüüüüûûûûûûûûûíííííííí\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009Aüüüûûûûûûûûûûûøøøøííììì\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009Bûûûûûûûûûûûøøøøøøìììì\u009A\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009C\u009Cûûûûûûûûûøøøøøøøìììì\u009A\u009A\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009Cûûûûûûøøøøøøøøìììì\u009A\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009Cûûûøøøøøøøøøìììì\u009A\u009A\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009Cøøøøøøøøøùìììì%%\u009B\u009B\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001Eùùùùùùùùùìììì%%%%\u009B\u009B\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001Eùùùùùùùùùù\u001C\u001C\u001C%%%%%\u009B\u009B\u009B\u009C\u009C\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùùùù\u001C\u001C\u001C\u001C%%%%%%\u009B\u009B\u009C\u009C\u009C\u009C\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eùùùùùù\u001C\u001C\u001C\u001C\u001C%%%%%%\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúùùùùù\u001C\u001C\u001C\u001C\u001C%%%%%\u009E\u009E\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúúúúúúú\u001C\u001C\u001C\u001C\u001C%%%%\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u001E\u001E\u001E\u001E\u001E\u001E\u001Eúúúúúúúúú\u001C\u001C\u001C\u001C%%%\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E889999úúúúúúúú\u008A\u008A\u008A\u001C\u001C\u009F\u009F\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E9999999úúúúúú\u008A\u008A\u008A\u008A\u008A\u008A\u009D\u009D\u009D\u009D\u009E\u009E\u009E\u009E\u009E\u009E\u009E\u009E&&&&&9:::úúúú\u001D\u008A\u008A\u008A\u008A\u008Aêª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009E\u009E\u009E&&&&&&::::\u001D\u001D\u001D\u001D\u001D\u001D\u008Aêêêªªª\u009D\u009D\u009D\u009D\u009D\u009D\u009D\u009D&&&&&&&:::;;\u001D\u001D\u001D\u001D\u001Dêêêêªªªª\u009D\u009D\u009D\u009D\u009D\u009D\u009D©&&&&&&&:;;;\u001D\u001D\u001D\u001DCêêêêªªªªªª\u009D\u009D\u009D©©©©&&&&&&;;;;;\u001DCCCCêêêªªªªªªª««««©©©&&&&;;;;;;CCCC\u008B\u008B\u008B\u008Bªªªªªª««««««««©&&&;;;;<<<<<<\u008B\u008B\u008B\u008Bªªªªª«««««««««««&;;'PPPP<<<<\u008B\u008B\u008B\u008B(((((««««««««««««'''''''PP<<\u000E\u000E\u000F\u000F(((((«««««««««««'''''''''''\u000E\u000F\u000F\u000F\u000F((((((««««««««««''''''''''''\u000F\u000F\u000F\u000F");
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info).
     *
     * @param rgbaPalette an array of RGBA8888 ints to use as a palette
     */
    public PaletteReducer(int[] rgbaPalette) {
        paletteMapping = new byte[0x8000];
        exact(rgbaPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Color[] colorPalette) {
        paletteMapping = new byte[0x8000];
        exact(colorPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given Array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Array<Color> colorPalette) {
        paletteMapping = new byte[0x8000];
        if (colorPalette != null)
            exact(colorPalette.items, colorPalette.size);
        else
            exact(Coloring.AURORA);
    }

    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap)} for more info).
     *
     * @param pixmap a Pixmap to analyze in detail to produce a palette
     */
    public PaletteReducer(Pixmap pixmap) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap);
    }

    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap, int)} for more info).
     *
     * @param pixmap    a Pixmap to analyze in detail to produce a palette
     * @param threshold the minimum difference between colors required to put them in the palette (default 400)
     */
    public PaletteReducer(Pixmap pixmap, int threshold) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap, threshold);
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param color2 an RGBA8888 color as an int
     * @return the difference between the given colors, as a positive int
     */
    public static int difference(final int color1, final int color2) {
        int rmean = ((color1 >>> 24) + (color2 >>> 24));
        int r = (color1 >>> 24) - (color2 >>> 24);
        int g = (color1 >>> 16 & 0xFF) - (color2 >>> 16 & 0xFF) << 1;
        int b = (color1 >>> 8 & 0xFF) - (color2 >>> 8 & 0xFF);
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
        return (((1024 + rmean) * r * r) >> 9) + g * g + (((1534 - rmean) * b * b) >> 9);
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param r2     red value from 0 to 255, inclusive
     * @param g2     green value from 0 to 255, inclusive
     * @param b2     blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive int
     */
    public static int difference(final int color1, int r2, int g2, int b2) {
//        r2 = (r2 << 3 | r2 >>> 2);
//        g2 = (g2 << 3 | g2 >>> 2);
//        b2 = (b2 << 3 | b2 >>> 2);
        final int rmean = ((color1 >>> 24) + r2),
                r = (color1 >>> 24) - r2,
                g = (color1 >>> 16 & 0xFF) - g2 << 1,
                b = (color1 >>> 8 & 0xFF) - b2;
        return (((1024 + rmean) * r * r) >> 9) + g * g + (((1534 - rmean) * b * b) >> 9);
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param r1 red value from 0 to 255, inclusive
     * @param r2 red value from 0 to 255, inclusive
     * @param g1 green value from 0 to 255, inclusive
     * @param g2 green value from 0 to 255, inclusive
     * @param b1 blue value from 0 to 255, inclusive
     * @param b2 blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive int
     */
    public static int difference(final int r1, final int r2, final int g1, final int g2, final int b1, final int b2) {
        final int rmean = (r1 + r2),
                r = r1 - r2,
                g = g1 - g2 << 1,
                b = b1 - b2;
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
        return (((1024 + rmean) * r * r) >> 9) + g * g + (((1534 - rmean) * b * b) >> 9);
    }

    /**
     * Gets a pseudo-random float between -0.65625f and 0.65625f, determined by the upper 23 bits of seed.
     * This currently uses a uniform distribution for its output, but earlier versions intentionally used a non-uniform
     * one; a non-uniform distribution can sometimes work well but is very dependent on how error propagates through a
     * dithered image, and in bad cases can produce bands of bright mistakenly-error-adjusted colors.
     * @param seed any int, but only the most-significant 23 bits will be used
     * @return a float between -0.65625f and 0.65625f, with fairly uniform distribution as long as seed is uniform
     */
    public static float randomXi(int seed)
    {
        return ((seed >> 9) * 0x1.5p-23f);
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x400000)|0x3FFFFF)) | 0x3f800000) - 1.4f;
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x600000)|0x1FFFFF)) | 0x3f800000) - 1.3f;
    }

    /**
     * Builds the palette information this PNG8 stores from the RGBA8888 ints in {@code rgbaPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in rgbaPalette, and only if it is {@code 0} (fully transparent
     * black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only has one color, then
     * this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including transparent).
     *
     * @param rgbaPalette an array of RGBA8888 ints; all will be used up to 256 items or the length of the array
     */
    public void exact(int[] rgbaPalette) {
        final long startTime = TimeUtils.millis();
        if (rgbaPalette == null || rgbaPalette.length < 2) {
            rgbaPalette = Coloring.AURORA;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(256, rgbaPalette.length);
        int color, c2;
        int dist;
        for (int i = 0; i < plen; i++) {
            color = rgbaPalette[i];
            paletteArray[i] = color;
            paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }

//        try {
//            ByteBuffer buffer = java.nio.ByteBuffer.allocate(0x8000);//.order(ByteOrder.LITTLE_ENDIAN);
//            //buffer.asIntBuffer().put(paletteArray);
//            buffer.put(paletteMapping, 0, 0x8000);
//            Gdx.files.local("palette" + plen + '_' + CrossHash.hash(paletteMapping) + ".txt").writeString(new String(buffer.array(), "ISO-8859-1"), false, "ISO-8859-1");
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }
        System.out.println(TimeUtils.timeSinceMillis(startTime) + " milliseconds for palette with length " + plen);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info) and an encoded String to use to look up pre-loaded color data.
     *
     * @param palette an array of RGBA8888 ints to use as a palette
     * @param preload an ISO-8859-1-encoded String containing preload data
     */
    public PaletteReducer(int[] palette, String preload)
    {
        final long startTime = TimeUtils.millis();
        System.arraycopy(palette, 0, paletteArray, 0, Math.min(palette.length, 256));
        try {
            paletteMapping = preload.getBytes("ISO-8859-1");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            paletteMapping = new byte[0x8000];
        }
        System.out.println(TimeUtils.timeSinceMillis(startTime) + " milliseconds for palette with length " + palette.length);
    }
    
    /**
     * Builds the palette information this PNG8 stores from the Color objects in {@code colorPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only
     * has one color, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including
     * transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items or the length of the array
     */
    public void exact(Color[] colorPalette) {
        exact(colorPalette, 256);
    }

    /**
     * Builds the palette information this PNG8 stores from the Color objects in {@code colorPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, only has
     * one color, or limit is less than 2, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen
     * colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items, limit, or the length of the array
     * @param limit        a limit on how many Color items to use from colorPalette; useful if colorPalette is from an Array
     */
    public void exact(Color[] colorPalette, int limit) {
        if (colorPalette == null || colorPalette.length < 2 || limit < 2) {
            exact(Coloring.AURORA);
            return;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(Math.min(256, colorPalette.length), limit);
        int color, c2;
        int dist;
        for (int i = 0; i < plen; i++) {
            color = Color.rgba8888(colorPalette[i]);
            paletteArray[i] = color;
            paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }
    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * uses a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least 400, it is
     * allowed in the palette, otherwise it is kept out for being too similar to existing colors. This doesn't return a
     * value but instead stores the palette info in this object; a PaletteReducer can be assigned to the
     * {@link PNG8#palette} field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     */
    public void analyze(Pixmap pixmap) {
        analyze(pixmap, 400);
    }

    private static final Comparator<IntIntMap.Entry> entryComparator = new Comparator<IntIntMap.Entry>() {
        @Override
        public int compare(IntIntMap.Entry o1, IntIntMap.Entry o2) {
            return o2.value - o1.value;
        }
    };


    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * takes a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least
     * {@code threshold}, it is allowed in the palette, otherwise it is kept out for being too similar to existing
     * colors. The threshold is usually between 250 and 1000, and 400 is a good default. This doesn't return a value but
     * instead stores the palette info in this object; a PaletteReducer can be assigned to the {@link PNG8#palette}
     * field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap    a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     * @param threshold a minimum color difference as produced by {@link #difference(int, int)}; usually between 250 and 1000, 400 is a good default
     */
    public void analyze(Pixmap pixmap, int threshold) {
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        int color;
        final int width = pixmap.getWidth(), height = pixmap.getHeight();
        IntIntMap counts = new IntIntMap(256);
        int hasTransparent = 0;
        int[] reds = new int[256], greens = new int[256], blues = new int[256];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                color = pixmap.getPixel(x, y);
                if ((color & 0x80) != 0) {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    counts.getAndIncrement(color, 0, 1);
                } else {
                    hasTransparent = 1;
                }
            }
        }
        final int cs = counts.size;
        if (cs + hasTransparent <= 256) {
            int i = hasTransparent;
            for(IntIntMap.Entry e : counts) {
                color = e.key;
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        } else // reduce color count
        {
            ArrayList<IntIntMap.Entry> es = new ArrayList<>(cs);
            for(IntIntMap.Entry e : counts)
            {
                IntIntMap.Entry e2 = new IntIntMap.Entry();
                e2.key = e.key;
                e2.value = e.value;
                es.add(e2);
            }
            Collections.sort(es, entryComparator);
            int i = 1, c = 0;
            PER_BEST:
            for (; i < 256 && c < cs;) {
                color = es.get(c++).key;
                for (int j = 1; j < i; j++) {
                    if (difference(color, paletteArray[j]) < threshold)
                        continue PER_BEST;
                }
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        }
        int c2, dist;
        for (int r = 0; r < 32; r++) {
            for (int g = 0; g < 32; g++) {
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < 256; i++) {
                            if (dist > (dist = Math.min(dist, difference(reds[i], r, greens[i], g, blues[i], b))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }

    /**
     * Changes the "strength" of the dither effect applied during {@link #reduce(Pixmap)} calls. The default is 1f,
     * and while both values higher than 1f and lower than 1f are valid, they should not be negative. If you want dither
     * to be eliminated, don't set dither strength to 0; use {@link #reduceSolid(Pixmap)} instead of reduce().
     * @param ditherStrength dither strength as a non-negative float that should be close to 1f
     */
    public void setDitherStrength(float ditherStrength) {
        this.ditherStrength = 0.5f * ditherStrength;
        this.halfDitherStrength = 0.25f * ditherStrength;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduce (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * ditherStrength;
                        curErrorGreen[px+1] += gdiff * ditherStrength;
                        curErrorBlue[px+1]  += bdiff * ditherStrength;
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * halfDitherStrength;
                            nextErrorGreen[px-1] += gdiff * halfDitherStrength;
                            nextErrorBlue[px-1]  += bdiff * halfDitherStrength;
                        }
                        nextErrorRed[px]   += rdiff * halfDitherStrength;
                        nextErrorGreen[px] += gdiff * halfDitherStrength;
                        nextErrorBlue[px]  += bdiff * halfDitherStrength;
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, without dithering. This produces
     * blocky solid sections of color in most images where the palette isn't exact, instead of checkerboard-like
     * dithering patterns. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceSolid (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y);
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using
     * Burkes dithering instead of the Sierra Lite dithering that {@link #reduce(Pixmap)} uses.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. Burkes dithering causes error to be
     * propagated to more than twice as many pixels as Sierra Lite (7 instead of 3), but both only affect one row ahead
     * of the pixel that is currently being dithered. For small images, the time spent dithering should be negligible.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceBurkes (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        float r4, r2, r1, g4, g2, g1, b4, b2, b1;
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    r4 = rdiff * halfDitherStrength;
                    g4 = gdiff * halfDitherStrength;
                    b4 = bdiff * halfDitherStrength;
                    r2 = r4 * 0.5f;
                    g2 = g4 * 0.5f;
                    b2 = b4 * 0.5f;
                    r1 = r4 * 0.25f;
                    g1 = g4 * 0.25f;
                    b1 = b4 * 0.25f;
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += r4;
                        curErrorGreen[px+1] += g4;
                        curErrorBlue[px+1]  += b4;
                        if(px < lineLen - 2)
                        {

                            curErrorRed[px+2]   += r2;
                            curErrorGreen[px+2] += g2;
                            curErrorBlue[px+2]  += b2;
                        }
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += r2;
                            nextErrorGreen[px-1] += g2;
                            nextErrorBlue[px-1]  += b2;
                            if(px > 1)
                            {
                                nextErrorRed[px-2]   += r1;
                                nextErrorGreen[px-2] += g1;
                                nextErrorBlue[px-2]  += b1;
                            }
                        }
                        nextErrorRed[px]   += r4;
                        nextErrorGreen[px] += g4;
                        nextErrorBlue[px]  += b4;
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += r2;
                            nextErrorGreen[px+1] += g2;
                            nextErrorBlue[px+1]  += b2;
                            if(px < lineLen - 2)
                            {

                                nextErrorRed[px+2]   += r1;
                                nextErrorGreen[px+2] += g1;
                                nextErrorBlue[px+2]  += b1;
                            }
                        }
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using a
     * modified version of the algorithm presented in "Simple gradient-based error-diffusion method" by Xaingyu Y. Hu in
     * the Journal of Electronic Imaging, 2016. This algorithm uses pseudo-randomly-generated noise to adjust
     * Floyd-Steinberg dithering, with input for the pseudo-random state obtained by the non-transparent color values as
     * they are encountered. Very oddly, this tends to produce less random-seeming dither than
     * {@link #reduceBurkes(Pixmap)}, with this method often returning regular checkerboards where Burkes may produce
     * splotches of color. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. This method is probably slower than
     * {@link #reduceBurkes(Pixmap)} even though Burkes propagates error to more pixels, because this method also has to
     * generate two random values per non-transparent pixel. The random number "algorithm" this uses isn't very good
     * because it doesn't have to be good, it should just be fast and avoid clear artifacts; it's similar to one of
     * <a href="http://www.drdobbs.com/tools/fast-high-quality-parallel-random-number/231000484?pgno=2">Mark Overton's
     * subcycle generators</a> (which are usually paired, but that isn't the case here), but because it's
     * constantly being adjusted by additional colors as input, it may be more comparable to a rolling hash. This uses
     * {@link #randomXi(int)} to get the parameter in Hu's paper that's marked as {@code aξ}, but our randomXi() is
     * adjusted so it has half the range (from -0.5 to 0.5 instead of -1 to 1). That quirk ends up getting rather high
     * quality for this method, though it may have some grainy appearance in certain zones with mid-level intensity (an
     * acknowledged issue with the type of noise-based approach Hu uses, and not a very severe problem).
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceWithNoise (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff, state = 0xFEEDBEEF;
        byte er, eg, eb, paletteIndex;
        //float xir1, xir2, xig1, xig2, xib1, xib2, // would be used if random factors were per-channel
                // used now, where random factors are determined by whole colors as ints
        float xi1, xi2, w1 = ditherStrength * 0.125f, w3 = w1 * 3f, w5 = w1 * 5f, w7 = w1 * 7f;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    state += (color + 0x41C64E6D) ^ color >>> 7;
                    state = (state << 21 | state >>> 11);
                    xi1 = randomXi(state);
                    state ^= (state << 5 | state >>> 27) + 0x9E3779B9;
                    xi2 = randomXi(state);

//                    state += rdiff ^ rdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xir1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xir2 = randomXi(state);
//                    state += gdiff ^ gdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xig1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xig2 = randomXi(state);
//                    state += bdiff ^ bdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xib1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xib2 = randomXi(state);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * w7 * (1f + xi1);
                        curErrorGreen[px+1] += gdiff * w7 * (1f + xi1);
                        curErrorBlue[px+1]  += bdiff * w7 * (1f + xi1);
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * w3 * (1f + xi2);
                            nextErrorGreen[px-1] += gdiff * w3 * (1f + xi2);
                            nextErrorBlue[px-1]  += bdiff * w3 * (1f + xi2);
                        }
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += rdiff * w1 * (1f - xi2);
                            nextErrorGreen[px+1] += gdiff * w1 * (1f - xi2);
                            nextErrorBlue[px+1]  += bdiff * w1 * (1f - xi2);
                        }
                        nextErrorRed[px]   += rdiff * w5 * (1f - xi1);
                        nextErrorGreen[px] += gdiff * w5 * (1f - xi1);
                        nextErrorBlue[px]  += bdiff * w5 * (1f - xi1);
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }
    /**
     * Retrieves a random non-0 color index for the palette this would reduce to, with a higher likelihood for colors
     * that are used more often in reductions (those with few similar colors). The index is returned as a byte that,
     * when masked with 255 as with {@code (palette.randomColorIndex(random) & 255)}, can be used as an index into a
     * palette array with 256 or less elements that should have been used with {@link #exact(int[])} before to set the
     * palette this uses.
     * @param random an IRNG instance, such as a GWTRNG or RNG
     * @return a randomly selected color index from this palette with a non-uniform distribution, can be any byte but 0
     */
    public byte randomColorIndex(IRNG random)
    {
        return paletteMapping[random.next(15)];
    }

    /**
     * Retrieves a random non-transparent color from the palette this would reduce to, with a higher likelihood for
     * colors that are used more often in reductions (those with few similar colors). The color is returned as an
     * RGBA8888 int; you can assign one of these into a Color with {@link Color#rgba8888ToColor(Color, int)} or
     * {@link Color#set(int)}.
     * @param random an IRNG instance, such as a GWTRNG or RNG
     * @return a randomly selected color from this palette with a non-uniform distribution
     */
    public int randomColor(IRNG random)
    {
        return paletteArray[paletteMapping[random.next(15)] & 255];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. Both the parameter and the returned color are RGBA8888 ints.
     * @param color an RGBA8888 int that represents a color this should try to find a similar color for in its palette
     * @return an RGBA8888 int representing a color from this palette, or 0 if color is mostly transparent
     * (0 is often but not always in the palette)
     */
    public int reduceSingle(int color)
    {
        if((color & 0x80) == 0) // less visible than half-transparent
            return 0; // transparent
        return paletteArray[paletteMapping[
                (color >>> 17 & 0x7C00)
                        | (color >>> 14 & 0x3E0)
                        | (color >>> 11 & 0x1F)] & 0xFF];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. Both the parameter and the returned color are packed float colors, as produced by
     * {@link Color#toFloatBits()} or many methods in SColor.
     * @param packedColor a packed float color this should try to find a similar color for in its palette
     * @return a packed float color from this palette, or 0f if color is mostly transparent
     * (0f is often but not always in the palette)
     */
    public float reduceFloat(float packedColor)
    {
        final int color = NumberTools.floatToIntBits(packedColor);
        if(color >= 0) // if color is non-negative, then alpha is less than half of opaque
            return 0f;
        return NumberTools.reversedIntBitsToFloat(paletteArray[paletteMapping[
                (color << 7 & 0x7C00)
                        | (color >>> 6 & 0x3E0)
                        | (color >>> 19)] & 0xFF] & 0xFFFFFFFE);

    }

    /**
     * Modifies {@code color} so its RGB values will match the closest color in this PaletteReducer's palette. If color
     * has {@link Color#a} less than 0.5f, this will simply set color to be fully transparent, with rgba all 0.
     * @param color a libGDX Color that will be modified in-place; do not use a Color constant, use {@link Color#cpy()}
     *              or a temporary Color
     * @return color, after modifications.
     */
    public Color reduceInPlace(Color color)
    {
        if(color.a < 0.5f)
            return color.set(0);
        return color.set(paletteArray[paletteMapping[
                ((int) (color.r * 0x1f.8p+10) & 0x7C00)
                        | ((int) (color.g * 0x1f.8p+5) & 0x3E0)
                        | ((int) (color.r * 0x1f.8p+0))] & 0xFF]);
    }

}
